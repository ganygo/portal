<div class="row button-bar">
	<div class="col-md-12">
		<div class="form-group">
			<label>Örnek veri türü</label>
			<select id="dataType" class="form-control" onchange="dataTypeChange()">
				<option value="">-- Seç --</option>
				<option value="json">JSON veya text veri</option>
				<option value="collection" <% if(form.type!='file-importer'){%>selected<%}%>>Collection</option>
				<option value="file" <% if(form.type=='file-importer'){%>selected<%}%>>Dosya(lar)dan seç</option>
			</select>
		</div>
	</div>
</div>

<div id="dataJson" class="card" style="display: none;">
	<div class="card-header collapsible">
		JSON veya text veri (data)
		<div class="float-right">
			<a class="btn btn-sm btn-light border ml-1" href="javascript:copyToClipboard('dataJson')" title="Kopyala"><i class="far fa-copy"></i></a>
		</div>
	</div>
	<div class="card-body p-0">
		<pre class="prism-live language-js fill" style="min-height: 22rem;max-height: 22rem;"><code></code></pre>
	</div>
</div>

<div id="dataColl" class="card" style="display: none;">
	<div class="card-header collapsible">
		Collection dan alinan veri (data)
		<div class="float-right">
			<a class="btn btn-sm btn-light border ml-1" href="javascript:copyToClipboard('dataColl')" title="Kopyala"><i class="far fa-copy"></i></a>
		</div>
	</div>
	<div class="card-body p-0">
		<div class="row mx-2">
			<div class="form-group col-md-3">
				<label for="" class="m-0">Collection Name:</label>
				<select id="dataCollCollection" class="form-control" >
					<option value="">-- Yok --</option>
					<% collectionList.forEach((e)=>{ %>
					<option value="<%- e %>" <% if(e==form.collections[0].name){%>selected<%}%> ><%- e %></option>
					<% }) %>
				</select>
			</div>
			<div class="form-group col-md-3">
				<label for="" class="m-0">Collection Filter:</label>
				<input type="text" class="form-control"  id="dataCollFilter" placeholder="" autocomplete="off" value="<%- form.collections[0].filter %>">
			</div>
			<div class="form-group col-md-3">
				<br>
				<a href="javascript:getCollectionData();" class="btn btn-sm btn-secondary"><i class="fas fa-database"></i> Collection Data Getir</a>
			</div>
		</div>
		<pre class="prism-live language-js fill" style="min-height: 22rem;max-height: 22rem;"><code></code></pre>
	</div>
</div>

<div id="dataFile"class="card" style="display: none;">
	<div class="card-header collapsible">
	</div>
	<div class="card-body">
		EJS kodlarinda "data.files[{name:'filename',data:'dosya icerigi',size:dosyaKapasitesi}]" degiskeninde kullanilir
		<ul id="data-file-list">
		</ul>
		<div class="row">
			<div class="col-md-12">
				<a class="btn btn-sm btn-secondary" href="javascript:$('#fileUpload2').trigger('click')" title="Ornek veriyi dosdan iceri al"><i class="fas fa-file-import"></i> Dosya(lar) seç</a>
				<a class="btn btn-sm btn-secondary" href="javascript:clearDataFileList()" title="Dosyalari temizle"><i class="fas fa-close"></i> Temizle</a>
			</div>
		</div>
	</div>
</div>


<div class="row mt-3 button-bar">
	<div class="col-md-12 p-2">
		<a href="javascript:render()" class="btn  btn-sm btn-primary" title="programi ornek data ile render et"><i class="far fa-list-alt"></i> Sadece Render</a>
		<a href="javascript:run()" class="btn  btn-sm btn-primary" title="programi ornek data ile render edip calistirir"><i class="fas fa-play"></i> Çalıştır</a>
	</div>
</div>
<div id="render" class="card mt-2">
	<div class="card-header collapsed">
		rendered
		<div class="float-right">
			<a class="btn btn-sm btn-light border ml-1" href="javascript:copyToClipboard('rendered')" title="Kopyala"><i class="far fa-copy"></i></a>
		</div>
	</div>
	<div class="card-body p-0">
		<pre class="prism-live language-js fill" style="min-height: 22rem;max-height: 22rem;"><code></code></pre>
	</div>
</div>

<div id="console" class="card mt-2">
	<div class="card-header collapsed">
		console
		<div class="float-right">
			<a class="btn btn-sm btn-light border ml-1" href="javascript:copyToClipboard('console')" title="Kopyala"><i class="far fa-copy"></i></a>
		</div>
	</div>
	<div class="card-body p-0">
		<pre class="prism-live language-js fill" style="min-height: 22rem;max-height: 22rem;"><code></code></pre>
	</div>
</div>
<input type="file" name="fileUpload2" id="fileUpload2" style="visibility:hidden;display: none;" accept="*.*" multiple>

<script type="text/javascript">
	var dataFileList=[]

	function calistir(){
		alert(doc.files.length)
	}

	function connectionTypeChange(){
		if($('#connectionType').val()=='mssql' || $('#connectionType').val()=='mysql'){
			$('.sqlconnection-row').show()
		}else{
			$('.sqlconnection-row').hide()
		}
	}
	connectionTypeChange()

	dataTypeChange()

	function localConnectorChange(){
		if($('#localConnector').val()=='')
			return
		var a=JSON.parse(decodeURIComponent($('#localConnector').val()))
		$('#connectorId').val(a.connectorId)
		$('#connectorPass').val(a.connectorPass)
		$('#connectionType').val(a.connectionType)
		$('#connection-server').val(a.connection.server)
		$('#connection-port').val(a.connection.port)
		$('#connection-database').val(a.connection.database)
		$('#connection-username').val(a.connection.username)
		$('#connection-password').val(a.connection.password)
		connectionTypeChange()
	}

	
	function printConsole(text){
		var s=$('#console code').html()
		s+='\r\n' + text
		$('#console code').html(s)
	}

	

	function render(cb){
		$('#render .card-collapse').collapse('show')
		$('#render code').html('')
		doc['data']={}

		switch($('#dataType').val()){
			case 'json':
			doc['data']=btoa2($('#dataJson textarea').val())
			break
			case 'collection':
			doc['data']=btoa2($('#dataColl textarea').val())
			break
			case 'file':
			doc['data']['files']=dataFileList
			break
		}
		

		$.ajax({
			url:`/dbapi/programs/render?sid=${q.sid}`,
			data:doc,
			type:'POST',
			success:function(result){
				if(result.success){
					$('#render code').html(htmlEncode(result.data))
					if(cb)
						cb(null,result.data)
				}else{
					$('#render code').html(`Error:\r\n${result.error.code} - ${result.error.message}`)
					if(cb)
						cb(result.error)
				}
			},
			error:function(err){

				alert(err)
				if(cb)
					cb({code:err.name || 'Error',message:err.message || 'Hata olustu'})
				console.log(err)
			}
		})
	}

	function run(){
		$('#render .card-collapse').collapse('hide')
		$('#console .card-collapse').collapse('show')
		doc['data']={}
		switch($('#dataType').val()){
			case 'json':
			doc['data']=btoa2($('#dataJson textarea').val())
			break
			case 'file':
			doc.data['files']=dataFileList
			break
			case 'collection':
			doc['data']=btoa2($('#dataColl textarea').val())
			break
		}
		
		doc.name=$('input[name="name"]').val()
		doc.type=$('select[name="type"]').val()
		doc.collections[0].name=$('select[name="collections[0][name]"]').val()
		doc.collections[0].filter=$('input[name="collections[0][filter]"]').val()
		doc.passive=$('input[name="passive"]').prop('checked')
		doc.connector.connectorId=$('input[name="connector[connectorId]"]').val()
		doc.connector.connectorPass=$('input[name="connector[connectorPass]"]').val()
		doc.connector.connectionType=$('select[name="connector[connectionType]"]').val()
		doc.connector.connection.server=$('input[name="connector[connection][server]"]').val()
		doc.connector.connection.port=Number($('input[name="connector[connection][port]"]').val())
		doc.connector.connection.database=$('input[name="connector[connection][database]"]').val()
		doc.connector.connection.username=$('input[name="connector[connection][username]"]').val()
		doc.connector.connection.password=$('input[name="connector[connection][password]"]').val()
		doc.crontab=$('input[name="crontab"]').val()

		$.ajax({
			url:`/dbapi/programs/run?sid=${q.sid}`,
			data:doc,
			type:'POST',
			dataType: "json",
			success:function(result){
				if(result.success){
					if(typeof result.data=='string'){
						$('#console code').html(result.data)
						if(doc.type=='file-exporter'){
							download(result.data,'export1.txt','application/file')
						}
					}else{
						$('#console code').html(htmlEncode(JSON.stringify(result.data,null,2)))
					}
					
				}else{
					$('#console code').html(`Error:\r\n${result.error.code} - ${result.error.message}`)
				}
			},
			error:function(err){
				console.log(err)
				alert(err)
			}
		})
	}

	// function indir(base64Data,fileName){
	// 	window.open(`data:application/file;base64,${base64Data}`)
    
	// }

	function dataTypeChange(){
		$('#dataJson').hide()
		$('#dataFile').hide()
		$('#dataColl').hide()


		switch($('#dataType').val()){
			case 'json':
			$('#dataJson').show()
			break
			case 'file':
			$('#dataFile').show()
			break
			case 'collection':
			$('#dataColl').show()
			break
		}
	}

	function getCollectionData(){
		if($('#dataCollCollection').val()=='')
			return alert('collection secilmemis')

		$.ajax({
			url:`/dbapi/collections/${$('#dataCollCollection').val()}?sid=${q.sid}`,
			type:'GET',
			success:function(result){
				if(result.success){
					$('#dataColl code').html(htmlEncode(JSON.stringify(result.data,null,2)))
					
				}else{
					$('#dataColl code').html(`Error:\r\n${result.error.code} - ${result.error.message}`)
				}
			},
			error:function(err){
				alert(err)
				console.log(err)
			}
		})
	}

	function clearDataFileList(){
		dataFileList=[]
		showDataFileList()
	}

	function showDataFileList(){
		$('#data-file-list li').remove()
		var liste=document.getElementById('data-file-list')
		var s=''
		dataFileList.forEach((e)=>{
			s+=`<li><a href="data:application/file;base64,${e.data}" download="${e.name}">${e.name}</a></li>\r\n`
		})
		liste.innerHTML=s
	}
	// $('.nav-tabs a').on('shown.bs.tab', function(event){
	//   var x = $(event.target).text();         // active tab
	//   var y = $(event.relatedTarget).text();  // previous tab
	//   console.log(`event.target:`,event.target)
	//   console.log(`event.relatedTarget:`,event.relatedTarget)
	// });
	
	// document.getElementById("dataJson").getElementsByTagName('textarea')[0].addEventListener("change", function(){
	// 	localStorage.setItem('codedebug_dataJson',$('#dataJson textarea').val())
	// })

	// document.getElementById("dataColl").getElementsByTagName('textarea')[0].addEventListener("change", function(){
	// 	localStorage.setItem('codedebug_dataColl',$('#dataJson textarea').val())
	// })

	// if(localStorage.getItem('codedebug_dataJson')!=null)
	// 	$('#dataJson textarea').val(localStorage.getItem('codedebug_dataJson'))
	
	// if(localStorage.getItem('codedebug_dataColl')!=null)
	// 	$('#dataColl textarea').val(localStorage.getItem('codedebug_dataColl'))

	

	$(document).ready(()=>{
		$("#fileUpload2").change(function() {

			var reader  = new FileReader()
			var fileIndex=0
			var files=this.files
			dataFileList=[]
			reader.addEventListener("load", function(){

				if(reader.result){
					dataFileList[dataFileList.length-1].data=reader.result.split('base64,')[1]
				}
				fileIndex++
				runReader()
			})

			function runReader(){
				if(fileIndex>=files.length){
					showDataFileList()
					return
				}
				var file=files[fileIndex]
				dataFileList.push({name:file.name,modifiedDate:file.lastModifiedDate,size:file.size,data:''})
				reader.readAsDataURL(file)
			}

			runReader()
		})


	})
</script>