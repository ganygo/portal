<script type="text/javascript">
	(function(exports) {

		var script=''
		var defaultButtons={

			add:[false,''],
			copy:[false,''],
			view:[false,''],
			print:[false,''],
			edit:[false,''],
			delete:[false,'']
		}
		var rootGridId=0
		var controlItem
		
		var _bRoot=false
		var _divId=''

		exports.FormControl = Object.freeze({
			build:build,
			card:card,
			tab:tab,
			group:group,
			textBox:textBox,
			numberBox:numberBox,
			dateBox:dateBox,
			timeBox:timeBox,
			lookup:lookup,
			remoteLookup:remoteLookup,
			checkBox:checkBox,
			checkBoxLookup:checkBoxLookup,
			dateRangeBox:dateRangeBox,
		
			grid:grid,
			gridHtml:gridHtml,
			addGridRow:addGridRow,
			editRow:editRow,
			modalRowOK:modalRowOK,
			refreshGrid:refreshGrid,
			generateControls:generateControls,
			get item(){
				return controlItem
			},
			set item(value){
				controlItem=value
			},
			get divId(){
				return _divId
			},
			set divId(value){
				_divId=value
			},

			get bRoot(){
				return _bRoot
			},
			set bRoot(value){
				_bRoot=value
			},
			get script(){
				return script
			},
			set script(value){
				script=value
			}
		})

		function build(pageObj,divId){
			this.divId=divId

			var mainCtrl=document.getElementById(divId)

			var sayfalar=[]
			var jsonPage
			switch(window.hashObj.function){
				case 'edit':
				jsonPage=clone(pageObj.edit || pageObj.form)
				break
				case 'view':
				jsonPage=clone(pageObj.view || pageObj.edit || pageObj.form)
				break
				case 'addnew':
				jsonPage=clone(pageObj.addnew || pageObj.form)
				break
				default:
				jsonPage=clone(pageObj.index)
				break
			}
			
			if(!Array.isArray(jsonPage)){
				sayfalar.push(jsonPage)
			}else{
				sayfalar=jsonPage
			}
			
 			$('#headerButtons').html('')

			var s='<form><div class="row">'
			
			var index=0

			function calistir(cb){
				if(index>=sayfalar.length)
					return cb()
				

				getRemoteData(sayfalar[index],(err,data)=>{
					if(!err){
						var fieldList=collectFieldList(sayfalar[index])

						script+=`
					
						`
						if(sayfalar[index].type=='form' && sayfalar[index].dataSource){
							var hbtn=`
							<a href="javascript:formKaydet('#${divId}');" class="btn btn-primary  btn-form-header" title="Kaydet"><i class="fas fa-save"></i></a>
							<a href="javascript:history.back(-1);" class="btn btn-dark  btn-form-header ml-2" title="VazgeÃ§"><i class="fas fa-reply"></i></a>`
							$('#headerButtons').html(hbtn)
							script+=`
								function formKaydet(divId){
									var dataSource=${JSON.stringify(sayfalar[index].dataSource)}
									var formData=getFormData(\`\${divId} form\`)
									formSave(dataSource,formData)
								}
								
								$('#${divId} input,select').on('change',(e)=>{
									var fields=${JSON.stringify(fieldList)}
									var valueObj=getDivData('#${divId}')
									console.log('root fields:',fields)
									console.log('root valueObj:',valueObj)
									Object.keys(fields).forEach((key)=>{
										if(fields[key].id!=e.target.id && fields[key].calc){
											try{
												$(\`#\${fields[key].id}\`).val(eval(replaceUrlCurlyBracket(fields[key].calc,valueObj)))
											}catch(tryErr){
												$(\`#\${fields[key].id}\`).val(replaceUrlCurlyBracket(fields[key].calc,valueObj))
											}
											
										}
									})
								})
							`
						}
						
						s+=generateControls(clone(sayfalar[index]),data,true)

						
						index++
						setTimeout(calistir,0,cb)
					}else{
						cb(err)
					}
				})
			}



			calistir((err)=>{
				if(!err){
					s+=`</div></form>`
					mainCtrl.innerHTML=s
					loadCardCollapses()
					
					$(`#${divId}`).append(`<script type="text/javascript">${script}<\/script>`)

				}else{
					s+=`Hata:${err.code || err.name || ''} - ${err.message || err.name || ''}</div></form>`
					mainCtrl.innerHTML=s
				}
				script=''
			})


			// }catch(err){
			// 	console.error('Hata:',err)
			// 	mainCtrl.innerHTML=`Oppsss! Render Hatasi: <br>${err.name || ''}<br>${err.message || ''}<br>${(err.stack || '').replaceAll('\n','<br>')}`
			// }
		}

		function generateControls(item,data,bRoot=false){
			var s=''
			var autocol=item.options?(item.options.autocol===true?true:false):false
			if(item.script!=undefined){
				if(Array.isArray(item.script)){
					script+=item.script.join('\r\n')
				}else{
					script+=`${item.script || ''}\r\n`
				}
			}

			if(item.fields){
				Object.keys(item.fields).forEach((key)=>{
					item.fields[key].field=key
					item.fields[key]=itemDefaultValues(item.fields[key],autocol)
					if(item.type=='grid'){
						item.fields[key].parentField=item.field || ''
						item.parentField=item.field || ''
					}
				})
			}else if(item.tabs){
				item.tabs.forEach((tab)=>{
					if(tab.fields){
						Object.keys(tab.fields).forEach((key)=>{
							tab.fields[key].field=key
							tab.fields[key]=itemDefaultValues(tab.fields[key],autocol)
						})
					}
				})
			}
			if(!data){
				data={value:{}}
			}



			switch((item.type || '').toLowerCase()){
				case 'string' :
				item.value=getPropertyByKeyPath(data.value,item.field) || ''
				s+=textBox(item)
				break
				case 'number' :
				item.value=getPropertyByKeyPath(data.value,item.field) || 0
				s+=numberBox(item)
				break
				case 'money' :
				item.value=Number(getPropertyByKeyPath(data.value,item.field) || 0).formatMoney()
				s+=numberBox(item)
				break
				case 'date' : 
				item.value=getPropertyByKeyPath(data.value,item.field)
				s+=dateBox(item)
				break
				case 'time' : 
				item.value=getPropertyByKeyPath(data.value,item.field)
				s+=timeBox(item)
				break
				case 'lookup' :
				item.value=getPropertyByKeyPath(data.value,item.field)
				s+=lookup(item)
				break
				case 'remotelookup' : 
				item.value=getPropertyByKeyPath(data.value,item.field)
				if(item.lookupTextField){
					item.valueText=getPropertyByKeyPath(data.value,item.lookupTextField)
				}
				s+=remoteLookup(item)

				break
				case 'boolean' :
				item.value=getPropertyByKeyPath(data.value,item.field)
				s+=checkBox(item)
				break
				case 'daterange' : 
				s+=dateRangeBox(item)
				break
				case 'w-100': 
				case 'w100': 
				case 'divisor': 
				s+=`<div class="w-100"></div>`
				break
				case 'grid':

				if(bRoot){
					item.value=data.value || []
					item.paging=data.paging
					s+=grid(item, bRoot)
				}else{
					item.value=getPropertyByKeyPath(data.value,item.field)
					
					item.controls=grid(item, bRoot)
					s+=card(item)
				}

				break

				case 'tab':
				case 'form':
				case 'filter':
				case 'group':
				case 'modal':
				
				
				if(item.fields){
					item.controls=''
					Object.keys(item.fields).forEach((key)=>{
						item.controls+=generateControls(item.fields[key],data)
					})
					if(bRoot || item.type=='modal'){
						s+=item.controls
					}else{

						s+=card(item)
					}
				}else if(item.tabs){
					item.tabs.forEach((tab,index)=>{
						tab.controls=''
						if(tab.fields){
							Object.keys(tab.fields).forEach((key)=>{
								tab.controls+=generateControls(tab.fields[key],data)
							})
						}
					})
					s+=tab(item)
				}
				
				break
				
				default:
				item.value=getPropertyByKeyPath(data.value,item.field)
				s+=textBox(item)
				break
			}

			
			
			return s
		}

		function grid(item,bRoot,cb){
			this.item=gridDefaults(item,bRoot)
			script+=`
				var grid${item.id}=FormControl.FormControl
				grid${item.id}.item=${JSON.stringify(item)}
				grid${item.id}.bRoot=${bRoot}
				grid${item.id}.refreshGrid()
			`
			this.bRoot=bRoot

			return `<div id="${item.id}" class="table-responsive ${item.options.show.infoRow?'mt-1':''}"></div>
			${modalRow(this.item)}
			`
			
			// var s=``
			// // getRemoteData(item,bRoot,(err,item)=>{
			// // 	if(!err){
			// 	s+=gridHtml(this.item,bRoot)
			// 	s+=modalRow(this.item)
			// 	// }else{
			// 	// 	s+=`Hata:${err.code || err.name || ''} - ${err.message || ''}`
			// 	// }
			// 	if(cb){
			// 		cb(null,s)
			// 	}else{
			// 		return s
			// 	}
				
			// // })
		}

		function buttonOptions(item,bRoot){
			var options=item.options || {}
			var buttonCount=0
			var currentPath=window.location.pathname

			if(options.buttons==undefined){
				options.buttons=defaultButtons
			}else{
				options.buttons=Object.assign({},defaultButtons, options.buttons)
				Object.keys(options.buttons).forEach((key)=>{
					if(typeof options.buttons[key]=='boolean'){
						options.buttons[key]=[options.buttons[key],'']
					}else if(Array.isArray(options.buttons[key])){
						if(options.buttons[key].length<2)
							options.buttons[key].push('')
					}
				})
			}

			if(options.buttons.add[0]==true && options.buttons.add[1]==''){
				if(bRoot){
					// options.buttons.add[1]=`<a href="${currentPath}/addnew?mid=${q.mid}" class="btn btn-primary  btn-sm far fa-plus-square" target="_self"  title="Yeni Ekle"></a>`
					options.buttons.add[1]=`<a href="${currentPath}?mid=${q.mid}#addnew/" class="btn btn-primary  btn-sm far fa-plus-square" target="_self"  title="Yeni Ekle"></a>`
				}else{
					options.buttons.add[1]=`<a href="javascript:grid${item.id}.addGridRow()" class="btn btn-primary  btn-sm far fa-plus-square" target="_self"  title="Yeni Ekle"></a>`
				}
			}

			if(options.buttons.copy[0]==true && options.buttons.copy[1]==''){
				options.buttons.copy[1]=`<a href="javascript:gridHelper.gridCopyItem('{field[0]}', '{_id}')" class="btn btn-grid-row btn-success " title="Kopyala"><i class="fas fa-copy"></i></a>`
			}

			if(options.buttons.print[0]==true && options.buttons.print[1]==''){
				options.buttons.print[1]=`<a href="javascript:popupCenter('${currentPath}/print/{_id}?mid=${q.mid}','YazdÄ±r','900','600')" class="btn btn-grid-row btn-info " title="YazdÄ±r"><i class="fas fa-print"></i></a>`
			}

			if(options.buttons.view[0]==true && options.buttons.view[1]==''){
				options.buttons.view[1]=`<a href="javascript:popupCenter('${currentPath}/view/{_id}?mid=${q.mid}','Ä°ncele','900','600')" class="btn btn-info btn-grid-row fas fa-eye" title="Ä°ncele"></a>`
			}

			if(options.buttons.edit[0]==true && options.buttons.edit[1]==''){
				// options.buttons.edit[1]=`<a href="${currentPath}/edit/{_id}?mid=${q.mid}" class="btn btn-primary btn-grid-row fas fa-edit" target="_self"  title="DÃ¼zenle"></a>`
				if(bRoot){
					options.buttons.edit[1]=`<a href="${currentPath}?mid=${q.mid}#edit/id={_id}" class="btn btn-primary btn-grid-row fas fa-edit" target="_self"  title="DÃ¼zenle"></a>`
				}else{
					options.buttons.edit[1]=`<a href="javascript:grid${item.id}.editRow({rowIndex})" class="btn btn-success btn-grid-row fas fa-edit" target="_self"  title="DÃ¼zenle"></a>`
				}
			}

			if(options.buttons.delete[0]==true && options.buttons.delete[1]==''){
				if(bRoot){
					options.buttons.delete[1]=`<a href="javascript:gridHelper.gridDeleteItem('{field[0]}','{_id}')" class="btn btn-danger btn-grid-row fas fa-trash-alt" title="Sil"></a>`
				}else{
					options.buttons.delete[1]=`<a href="javascript:grid${item.id}.deleteRow({rowIndex})" class="btn btn-danger btn-grid-row fas fa-trash-alt" title="Sil"></a>`
				}
			}

			Object.keys(options.buttons).forEach((key)=>{
				buttonCount +=options.buttons[key][0]?1:0
			})
			if(buttonCount>1 && options.buttons.add[0])
				buttonCount--

			buttonCount=buttonCount>4?4:buttonCount

			if(bRoot){
				options.buttonWidth=`${buttonCount*45+10}px`
			}else{
				options.buttonWidth=`${2*45+10}px`
			}
			item.options=options
			return item
		}


		function gridHtml(item,bRoot){
			var s=``
			if(item.options.show.infoRow){
				s+=`
				<!-- info row -->
				<div class="row m-0 border">
				<div class="col-12 pt-1 px-1">
				<div class="float-left form-inline m-0 p-0 mt-1 mb-1">
				${item.options.show.filter?'<a class="btn btn-secondary btn-sm mr-3" data-toggle="collapse" href="#filterRow' + item.id +'" role="button" aria-expanded="false" aria-controls="filterRow' + item.id +'" title="Filtre satÄ±rÄ±nÄ± gÃ¶ster/gizle"><i class="fas fa-filter"></i></a>':''}
				${item.options.show.pageSize?pageSize(item,bRoot):''}
				${item.options.show.pageCount?pageCount(item,bRoot):''}
				</div>
				${item.options.show.pagerButtons?'<div class="float-right">' + pagerButtons(item,bRoot) + '</div>':''}
				</div>
				</div>
				<!-- ./info row -->
				`
			}
			s+=`
			<!-- table -->
			<table id="table${item.id}" class="table table-striped border m-0 ${!bRoot?'table-bordered':''}"  cellspacing="0">
			${item.options.show.header?header(item):''}
			${body(item,bRoot)}
			${item.options.show.footer?footer(item):''}
			</table>
			<!-- ./table -->
			`
			if(item.options.show.infoRow){
				s+=`
				<!-- info row -->
				<div class="row m-0 border">
				<div class="col-12 pt-1 px-1">
				<div class="float-left form-inline m-0 p-0 mt-1 mb-1">
				<div class="">
				buraya butonlar geliyor
				</div>
				${item.options.show.pageCount?pageCount(item,bRoot):''}
				</div>
				${item.options.show.pagerButtons?'<div class="float-right">' + pagerButtons(item,bRoot) + '</div>':''}
				</div>
				</div>
				<!-- ./info row -->
				`
			}
			return s
		}

		function itemDefaultValues(item,autocol=false){
			var field=item.field
			var lookupTextField=item.lookupTextField || ''
			if(item.parentField){
				field=`${item.parentField}.${field}`

			}
			if(item.lookupTextField){
				var lookupTextField=item.lookupTextField
				if(item.parentField){
					lookupTextField=`${item.parentField}.${item.lookupTextField}`
				}
				item.lookupTextFieldId=generateFormId(lookupTextField)
				item.lookupTextFieldName=generateFormName(lookupTextField)

			}
			item['id']=generateFormId(field)
			item['name']=generateFormName(field)
			item['title']=ifNull(item['title'],'')
			item['icon']=ifNull(item['icon'],'')

			item['type']=ifNull(item['type'],'')

			if(item.type=='' && item.fields){
				item.type='group'
			}
			if(item.type=='' && item.tabs){
				item.type='tab'
			}

			if(!isNaN(item.col)){
				item.col='col-md-' + item.col
			}else{
				if(autocol){
					switch(item.type.toLowerCase()){
						case 'identity':
						item.col='col-md-1'
						break
						case 'number':
						case 'money':
						item.col='col-md-2'
						break
						case 'remotelookup':
						item.col='col-md-6'
						break
						case 'lookup':
						item.col='col-md-2'
						if(maxLookupLength(item.lookup || {})>30){
							item.col='col-md-4'
						}
						break
						case 'boolean':
						item.col='col-md-2'
						break
						default:
						item.col='col-md-4'
						break
					}
				}else{
					if(item.type.toLowerCase()=='daterange'){
						item['col']=ifNull(item['col'],'col-md-6')
					}else{
						item['col']=ifNull(item['col'],'col-md-12')
					}
					
				}
			}

			item['required']=ifNull(item['required'],false)
			item['visible']=ifNull(item['visible'],true)
			item['collapsed']=ifNull(item['collapsed'],false)
			item['lookup']=ifNull(item['lookup'],{})
			if(item.staticValues!=undefined){
				item['lookup']=staticValues[item.staticValues] || {}
			}
			item['class']=ifNull(item['class'],'')
			item['readonly']=item.readonly || false
			item['hasChildren']=false

			if(item.required){
				if(item.title.substr(0,1)!='*'){
					item.title=`*${item.title}`
				}
			}

				
			return item
		}
		
		function refreshGrid(){
			
			$(`#${this.item.id}`).html(this.gridHtml(this.item,this.bRoot))

			$(`#pageSize${this.item.id}`).on('change',()=>{
				if(this.item.paging==undefined)
					this.item.paging={}
				this.item.paging.pageSize=$(`#pageSize${this.item.id}`).val()
				this.item.paging.page=1
				
				this.refreshGrid()
			})

			
			if(this.item.onchange){
				var onchange=this.item.onchange
				if(onchange.indexOf('this.value')>-1){
					onchange=onchange.replace('this.value',`JSON.parse(decodeURIComponent('${encodeURIComponent2(JSON.stringify(this.item.value))}'))`)
					eval(onchange)
				}else if(onchange.indexOf('this')>-1){
					onchange=onchange.replace('this',`JSON.parse(decodeURIComponent('${encodeURIComponent2(JSON.stringify(this.item))}'))`)
					eval(onchange)
				}else{
					eval(onchange)
				}
			}
			// this.grid(this.item,this.bRoot,(err,html)=>{
			// 	if(!err){
			// 		$(`#${this.item.id}`).html(html)
			// 	}else{
			// 		$(`#${this.item.id}`).html()
			// 	}
				
			// 	$(`#pageSize${this.item.id}`).on('change',()=>{
			// 		if(this.item.paging==undefined)
			// 			this.item.paging={}
			// 		this.item.paging.pageSize=$(`#pageSize${this.item.id}`).val()
			// 		this.item.paging.page=1
					
			// 		this.refreshGrid()
			// 	})
			// })
		}

		function addGridRow(){
			this.editRow(-1)
		}

		function editRow(rowIndex){
			if(!this.item.value){
				this.item.value=[]
			}
			var gridLine={}
			if(this.item.modal){
				gridLine=clone(this.item.modal)
			}else{
				gridLine={
					fields:clone(this.item.fields || {})
				}
			}
			script=''
			gridLine.type="modal"
			gridLine.options={autocol:true}

			if(rowIndex>=0){
				gridLine.value=this.item.value[rowIndex]
				$(`#modalRow${this.item.id} .modal-title`).html(`#${rowIndex+1} satÄ±rÄ±nÄ± dÃ¼zenle`)
			}else{
				gridLine.value={}
				$(`#modalRow${this.item.id} .modal-title`).html('Yeni satir')
				
			}
			
			gridLine=modalRowIcinParentFieldAyarla(this.item,gridLine)

			$(`#modalRow${this.item.id} .modal-body`).html(`<div class="row">${this.generateControls(gridLine,{value:gridLine.value})}</div>`)
			$(`#modalRow${this.item.id} .modal-footer`).html(`<a class="btn btn-primary" href="javascript:grid${this.item.id}.modalRowOK(${rowIndex})" title="Kaydet"><i class="fas fa-check"></i> Tamam</a><button class="btn btn-secondary" type="button" data-dismiss="modal">VazgeÃ§</button>`)

			script+=`
			$('#modalRow${this.item.id} .modal-body input,select').on('change',(e)=>{
					var fields=${JSON.stringify(gridLine.fieldList)}
					var valueObj=getDivData('#modalRow${this.item.id}','modalRow${this.item.id}')
					Object.keys(fields).forEach((key)=>{
						if(fields[key].id!=e.target.id && fields[key].calc){
							try{
								$(\`#\${fields[key].id}\`).val(eval(replaceUrlCurlyBracket(fields[key].calc,valueObj)))
							}catch(tryErr){
								$(\`#\${fields[key].id}\`).val(replaceUrlCurlyBracket(fields[key].calc,valueObj))
							}
						}
					})
				})
			`
			if(script!=''){
				$(`#${this.divId}`).append(`<script type="text/javascript">${script}<\/script>`)
			}
			

			$(`#modalRow${this.item.id}`).modal('show')
		}

		function modalRowIcinParentFieldAyarla(item, gridLine){
			var pfield=`modalRow${item.id}`
			var fieldList={}

			if(gridLine.tabs){
				gridLine.tabs.forEach((tab)=>{
					if(tab.fields){
						var fields={}
						Object.keys(tab.fields).forEach((key)=>{
							fields[`${pfield}.${key}`]=tab.fields[key]
							// if(fields[`${pfield}.${key}`].calc){
							// 	fields[`${pfield}.${key}`].calc=fields[`${pfield}.${key}`].calc.replaceAll('{',`{modalRow${item.id}.`)
							// }
							
							if(tab.fields[key].lookupTextField){
								fields[`${pfield}.${key}`].lookupTextField=`${pfield}.${tab.fields[key].lookupTextField}`
							}
						})
						tab.fields=fields
						fieldList=Object.assign({},fieldList,clone(fields))
					}
				})
			}else if(gridLine.fields){
				var fields={}
				Object.keys(gridLine.fields).forEach((key)=>{
					fields[`${pfield}.${key}`]=gridLine.fields[key]
					// if(fields[`${pfield}.${key}`].calc){
					// 	fields[`${pfield}.${key}`].calc=fields[`${pfield}.${key}`].calc.replaceAll('{',`{modalRow${item.id}.`)
					// }
					if(gridLine.fields[key].lookupTextField){
						fields[`${pfield}.${key}`].lookupTextField=`${pfield}.${gridLine.fields[key].lookupTextField}`
					}
				})
				gridLine.fields=fields
				fieldList=Object.assign({},fieldList,clone(fields))
			}
			var listObj=objectToListObject(gridLine.value)
			gridLine.value={} 
			Object.keys(listObj).forEach((key)=>{
				gridLine.value[`${pfield}.${key}`]=listObj[key]
			})
			gridLine.value=listObjectToObject(gridLine.value)

			Object.keys(fieldList).forEach((key)=>{
				fieldList[key].id=generateFormId(key)
				fieldList[key].name=generateFormName(key)
			})
			gridLine.fieldList=fieldList

			return gridLine
		}


		
		function modalRowOK(rowIndex){
			if(!this.item)
				return
			if(!this.item.value)
				this.item.value=[]
			
			var pfield=`modalRow${this.item.id}`
			
			var obj=getDivData(`#modalRow${this.item.id}`,pfield)
			if(rowIndex>=0 && rowIndex<this.item.value.length){
				var valObj=objectToListObject(this.item.value[rowIndex])
				valObj=Object.assign({},valObj,objectToListObject(obj))
				this.item.value[rowIndex]=listObjectToObject(valObj)
			}else if(rowIndex<0){
				this.item.value.push(obj)
			}
			
			
			$(`#modalRow${this.item.id}`).modal('hide')

			this.refreshGrid()
		}

		function modalRowOK111(rowIndex){
			if(!this.item)
				return
			if(!this.item.value)
				this.item.value=[]
			
			var pfield=`modalRow${this.item.id}`
			var listObj=getDivData(`#modalRow${this.item.id}`,pfield)
			var obj=listObjectToObject(listObj)
			if(rowIndex>=0 && rowIndex<this.item.value.length){
				var valObj=objectToListObject(this.item.value[rowIndex])
				valObj=Object.assign({},valObj,listObj)

				this.item.value[rowIndex]=listObjectToObject(valObj)

				
			}else if(rowIndex<0){
				this.item.value.push(listObjectToObject(obj))
			}
			
			
			$(`#modalRow${this.item.id}`).modal('hide')

			this.refreshGrid()
		}

		

		function modalRow(item){
			var s=`
			<div class="modal" id="modalRow${item.id}" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="true" aria-labelledby="modalRow${item.id}Label" aria-hidden="true">
			<div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered" role="document">
			<div class="modal-content">
			<div class="modal-header p-2 ">
			<label class="modal-title" id="modalRow${item.id}Label"></label>
			<button class="close" type="button" data-dismiss="modal" aria-label="Close">
			<span aria-hidden="true">&times;</span>
			</button>
			</div>
			<div class="modal-body p-2" style="overflow: auto;">

			</div>
			<div class="modal-footer">
			
			</div>
			</div>
			</div>
			</div>
			`
			return s
		}

		function body(item,bRoot){
			var s=`<tbody>`
			
			if(item.value){
				item.value.forEach((listItem,rowIndex)=>{
					s+=`<tr>`
					if(item.options.selection){
						s+=`<td><input class="grid-checkbox" type="checkbox" value="${listItem._id || ''}" /></td>`
					}
					Object.keys(item.fields).forEach((key)=>{
						var field=item.fields[key]
						var td=''
						var tdClass=`${field.class || 'ml-1'} `
						var itemValue=''
						if(field.type.toLowerCase()=='identity' || field.type.toLowerCase()=='autoincrement' || field.type.toLowerCase()=='autoinc'){
							itemValue=rowIndex+1
						}else{
							if(field.html){
								itemValue=replaceUrlCurlyBracket(field.html,listItem) || ''
							}else{
								itemValue=getPropertyByKeyPath(listItem,key)
								if(itemValue==undefined){
									itemValue=''
									if(field.type=='number' || field.type=='money'){
										itemValue=0
									}else if(field.type=='boolean'){
										itemValue=false
									}
								}
							}
						}
						switch(field.type.toLowerCase()){
							case 'lookup':
							Object.keys(field.lookup || {}).forEach((key2)=>{
								if(key2===itemValue.toString()){
									td+= field.lookup[key2]
									return
								}
							})
							if(td=='')
								td+=itemValue
							break
							case 'number':
							tdClass=field.class || 'text-right mr-1'
							td=itemValue
							break
							case 'money':
							tdClass=field.class || 'text-right mr-1'
							td=Number(itemValue).formatMoney()
							break

							case 'boolean':
							tdClass=field.class || 'text-center'
						// td.style.fontSize='20px'
						td=itemValue?'<i class="fas fa-check-square text-primary"></i>':'<i class="far fa-square text-dark"></i>'
						break
						case 'remotelookup':
						var bRemoteOlarakBulalim=true
						if(itemValue==undefined)
							itemValue=''

						if(typeof itemValue=='object' && itemValue._id!=undefined){
							
							td=`<div class="">${replaceUrlCurlyBracket((field.dataSource.label || '{name}'), itemValue)}</div>`
							bRemoteOlarakBulalim=false

						}else	if(field.lookupTextField){
							var valueText=getPropertyByKeyPath(listItem,field.lookupTextField)
							td=`<div class="">${valueText}</div>`
							if(!bRoot){
								td+=`<input type="hidden" name="${generateFormName((field.parentField?field.parentField + '.':'') + rowIndex + '.' + field.lookupTextField)}" value="${valueText}" />`
							}
							
							if(valueText=='' && itemValue!=''){
								bRemoteOlarakBulalim=true
							}else{
								bRemoteOlarakBulalim=false
							}
						}

						if(bRemoteOlarakBulalim){
							var cellId=''
							if(itemValue!=''){
								cellId=`${gridId}-cell-${itemValue}`
								if(remoteList==undefined){
									remoteList={}
								}

								if(remoteList[field.field]==undefined){
									remoteList[field.field]={
										dataSource:field.dataSource,
										list:{}
									}
								}
								if(remoteList[field.field].list[itemValue]==undefined){
									remoteList[field.field].list[itemValue]={
										cellId:'.' + cellId,
										text:''
									}
									if(field.lookupTextField){
										remoteList[field.field].list[itemValue]['lookupTextField']=`${generateFormName((field.parentField?field.parentField + '.':'') + rowIndex + '.' + field.lookupTextField)}`
									}
								}
							}
							
							td+=`<div class="${cellId}">rmtlkup${itemValue}</div>`
						}


						break
						default:
						
						td=itemValue
						break
					}
					if(!field.html && !bRoot){
						td+=`<input type="hidden" name="${generateFormName((field.parentField?field.parentField + '.':'') + rowIndex + '.' + key)}" value="${itemValue}" />`
					}
					
					s+=`<td class="${tdClass || ''} ${field.visible===false?'hidden':''}">${td}</td>`
				})

					s+=`<td class="text-center">${buttonRowCell(listItem,rowIndex,item,bRoot)}</td>`

					s+=`</tr>`
				})
			}
			s+=`</tbody>`
			return s
		}

		function buttonRowCell(listItem,rowIndex,item,bRoot){
			var s=``
			
			listItem['rowIndex']=rowIndex
			Object.keys(item.options.buttons).forEach((key)=>{
				if(key!='add')
					s+=`${item.options.buttons[key][0]?replaceUrlCurlyBracket(item.options.buttons[key][1],listItem):''}`
			})

			return s
		}

		function pageSize(item,bRoot){
			var s=`<div class="mt-1 align-items-center" style="display: inline-flex">
			Sayfada
			<select class="form-control input-inline input-sm" id="pageSize${item.id}">
			<option value="10" ${item.paging.pageSize==10?'selected':''}>10</option>
			<option value="20" ${item.paging.pageSize==20?'selected':''}>20</option>
			<option value="50" ${item.paging.pageSize==50?'selected':''}>50</option>
			<option value="100" ${item.paging.pageSize==100?'selected':''}>100</option>
			<option value="250" ${item.paging.pageSize==250?'selected':''}>250</option>
			<option value="500" ${item.paging.pageSize==500?'selected':''}>500</option>
			</select>
			</div>`

			return s
		}

		function pageCount(item,bRoot){
			var s=`<div class="ml-2" style="display: inline-block">`
			if(item.paging.pageSize>0 && item.paging.recordCount>0){
				s+=`${((item.paging.page-1)*item.paging.pageSize)+1} - ${(item.paging.page*item.paging.pageSize<item.paging.recordCount)?item.paging.page*item.paging.pageSize:item.paging.recordCount} arasÄ±, Toplam: ${item.paging.recordCount} kayit, ${item.paging.pageCount} sayfa`
			}else{
				s+=`Toplam: ${item.paging.recordCount} kayit`
			}
			s+=`</div>`

			return s
		}

		function pagerButtons(item,bRoot){
			var s=``

			return s
		}


		function header(item){
			var s=`
			<thead>
			<tr class="text-nowrap">
			${item.options.selection===true?'<th style="width: 30px;"><input class="grid-checkbox" type="checkbox" value="true" name="selectAll" id="selectAll" title="TÃ¼mÃ¼nÃ¼ seÃ§"></th>':''}
			`
			Object.keys(item.fields).forEach((key)=>{
				var field=item.fields[key]
				var cls=''
				switch(item.fields[key].type ){
					case 'money':
					case 'number':
					cls='text-right mr-1'
					break
					case 'boolean':
					cls='text-center'
					break
				}
				if(field.visible===false){
					cls+=' hidden'
				}
				s+=`<th class="${cls}" style="${field.width?'width:' + field.width:''}">${field.icon?'<i class="' + field.icon + '"></i>':''} ${field.title || ''}</th>`
			})

			s+=`<th class="text-center" style="width:${item.options.buttonWidth}">
			${item.options.buttons.add[0]==true?item.options.buttons.add[1]:''}
			</th>
			</tr>
			${item.options.show.filterRow===true?filterRow(item):''}
			</thead>
			`

			return s
		}

		function filterRow(item){
			
			var s=`<tr id="filterRow${item.id}" class="text-nowrap collapse">
			${item.options.selection===true?'<th></th>':''}
			`
			Object.keys(item.fields).forEach((key,index)=>{
				var field=clone(item.fields[key])
				var cell=''
				field.visible=field.visible==undefined?field.visible:true
				field.filter=field.filter==undefined?item.options.filter:field.filter
				field.id=generateFormId(`filter_${index}`)
				field.class='grid-filter'
				field.noGroup=true

				if(field.filter){
					switch(field.type.toLowerCase()){
						case 'lookup':
						field.showAll=true
						cell=lookup(field)
						break
						case 'remotelookup':
						cell=remoteLookup(field)
						break
						case 'boolean':
						cell=checkBoxLookup(field)
						break
						case 'date':
						cell=dateBox(field)
						break
						case 'time':
						cell=timeBox(field)
						break
						case 'number':
						cell=numberBox(field)
						break
						case 'money':
						cell=numberBox(field)
						break
						default:
						cell=textBox(field)
						break
					}
				}
				s+=`<th class="${field.visible==false?'hidden':''}">${cell}</th>`
			})

			s+=`
			<th></th>
			</tr>
			`
			
			return s
		}

		function footer(item){
			return `<tfood>qwerty</tfood>`
		}

		
		
		function gridDefaults(item,bRoot){
			if(item.id==undefined && bRoot){
				rootGridId++
				item.id=`rootGrid${rootGridId}`
			}
			item=buttonOptions(item,bRoot)
			if(!bRoot){
				item.options.show={
					filter:false,
					pageSize:false,
					pageCount:false,
					pagerButtons:false,
					header:true,
					footer:false
				}
			}else{
				item.options.show={
					filter:true,
					pageSize:true,
					pageCount:true,
					pagerButtons:true,
					header:true,
					footer:true
				}
			}
			if(item.options.show.filter || item.options.show.pageSize || item.options.show.pageCount || item.options.show.pagerButtons){
				item.options.show.infoRow=true
			}else{
				item.options.show.infoRow=false
			}
			item.options.show.filterRow=item.options.filter || false
			if(bRoot===false)
				item.options.show.filterRow=false

			if(item.options.show.filterRow){
				var bFound=false
				Object.keys(item.fields).forEach((key)=>{
					item.fields[key].filter=item.fields[key].filter==undefined?true:false
					if(item.fields[key].filter===true){
						bFound=true
						return
					}
				})
				if(bFound==false){
					item.options.show.filterRow=false
				}
			}
			return item
		}

		function card(item){
			var s=`<div class="card cerceve1 ${item.col || ''} p-0 m-0 mb-2 ${item.visible===false?'hidden':''}">
			<div class="card-header">
			<a class="btn btn-collapse ${item.collapsed?'collapsed':''}" data-toggle="collapse" data-target="#cardCollapse${item.id}" aria-expanded="${!item.collapsed?'false':'true'}" aria-fields="cardCollapse${item.id}" href="#"><i class="far fa-caret-square-up fa-2x"></i></a>
			${item.title}${helpButton(item)}
			</div>
			<div  id="cardCollapse${item.id}" class="card-body p-1 card-collapse collapse ${item.collapsed?'collapsed':'show'}">
			<div class="row">
			${item.html || item.controls || ''}
			</div>
			</div>
			</div>`
			return s
		}

		function tab(item){
			var bActive=false
			item.tabs.forEach((tab)=>{
				if(tab.active===true){
					bActive=true
					return
				}
			})
			if(!bActive && item.tabs.length>0){
				item.tabs[0].active=true
			}
			var s=`
			<div class="col-12">
			<ul class="nav nav-tabs" role="tablist">`
				item.tabs.forEach((tab,tabIndex)=>{
				s+=`<li class="nav-item">
					<a class="nav-link ${tab.active?'active':''}" href="#formTab${item.id}${tabIndex}" role="tab" data-toggle="tab" id="IDformTab${item.id}${tabIndex}" aria-controls="formTab${item.id}${tabIndex}" aria-selected="${tab.active?'true':'false'}">
						${tab.icon?'<i class="' + tab.icon + '"></i>':''} ${tab.title || ''}
					</a>
				</li>`
				}) 
			s+=`</ul>
			<div class="tab-content" style="min-height: 70vh;overflow: auto;">`
				item.tabs.forEach((tab,tabIndex)=>{
				s+=`<div class="tab-pane ${tab.active?'show active':''}" id="formTab${item.id}${tabIndex}" role="tabpanel" aria-labelledby="IDformTab${item.id}${tabIndex}">
					<div class="row">
					${tab.controls || ''}
					</div>
				</div>`
				})
			s+=`</div>
			</div>
			`
			return s
		}

		function group(input,item){
			if(item.noGroup===true){
				return input
			}else{
				return `<div class="form-group ${item.col || ''} ${item.visible===false?'hidden':''}">
				<label class="m-0 p-0 ${item.required?'form-required':''}">${item.title || ''}${helpButton(item)}</label>
				${input}
				</div>`
			}
		}

		function textBox(item){
			return group(`<input type="text" class="form-control ${item.class || ''}" id="${item.id}" name="${item.name}" field="${encodeURIComponent2(JSON.stringify(item))}" placeholder="${item.placeholder || item.title || item.label}" ${item.required?'required="required"':''} ${item.readonly==true?'readonly':''} onchange="${item.onchange || ''}" autocomplete="off" autofill="off" spellcheck="false" value="${item.value || ''}">`,item)
		}

		function numberBox(item){
			return group(`<input type="number" class="form-control text-right ${item.class || ''}" id="${item.id}" name="${item.name}" field="${encodeURIComponent2(JSON.stringify(item))}" placeholder="${item.placeholder || item.title || item.label}" ${item.required?'required="required"':''} ${item.readonly==true?'readonly':''} onchange="${item.onchange || ''}" autocomplete="off" autofill="off" spellcheck="false" value="${item.value || 0}">`,item)
		}

		function dateBox(item){
			return group(`<input type="date" class="form-control ${item.class || ''}" id="${item.id}" name="${item.name}" field="${encodeURIComponent2(JSON.stringify(item))}" placeholder="${item.placeholder || item.title || item.label}" ${item.required?'required="required"':''} ${item.readonly==true?'readonly':''} onchange="${item.onchange || ''}" autocomplete="off" autofill="off" spellcheck="false" value="${item.value || ''}">`,item)
		}

		function timeBox(item){
			return group(`<input type="time" class="form-control ${item.class || ''}" id="${item.id}" name="${item.name}" field="${encodeURIComponent2(JSON.stringify(item))}" placeholder="${item.placeholder || item.title || item.label}" ${item.required?'required="required"':''} ${item.readonly==true?'readonly':''} onchange="${item.onchange || ''}" autocomplete="off" autofill="off" spellcheck="false" value="${item.value || ''}">`,item)
		}

		function lookup(item){
			var s=`<select type="text" class="form-control ${item.class || ''}" id="${item.id}" name="${item.name}" field="${encodeURIComponent2(JSON.stringify(item))}" placeholder="${item.placeholder || item.title || item.label}" autocomplete="chrome-off" ${item.required?'required="required"':''} ${item.readonly==true?'disabled':''} onchange="${item.onchange || ''}">
			<option value="" ${item.value==''?'selected':''}>${item.showAll===true?'*':'-- SeÃ§ --'}</option>`
			if(item.lookup){
				Object.keys(item.lookup).forEach((key)=>{
					s+=`<option value="${key}" ${key===item.value?'selected':''}>${item.lookup[key]}</option>`
				})
			}
			s+=`</select>`
			if(item.lookupTextField){
				s+=`<input type="hidden" name="${item.lookupTextFieldName || ''}" value="">`
				script+=`
				$('#${item.id}').on('change',()=>{
					if($('#${item.id}').val()!=''){
						$('input[name="${item.lookupTextFieldName || ''}"]').val($('#${item.id} option:selected').text())
					}else{
						$('input[name="${item.lookupTextFieldName || ''}"]').val('')
					}
				})
				`
			}
			
			return group(s,item)
		}

		function checkBoxLookup(item){
			
			var s=``
			var input=`
			<select name="${item.name}" id="${item.id}" field="${encodeURIComponent2(JSON.stringify(item))}" class="form-control p-0 m-0 ${item.class || ''}">
			<option value="">*</option>
			<option value="true"><i class="fas fa-check-square text-primary"></i> Evet</option>
			<option value="false"><i class="far fa-square text-dark"></i> HayÄ±r</option>
			</select>
			`
			if(item.noGroup===true){
				s=input
			}else{
				s=`<div class="form-group ${item.col || ''} ${item.visible===false?'hidden':''}">
				<label>
				<span class="mb-1" style="display:block;">${item.title || ''}${helpButton(item)}</span>
				${input}
				</label>
				</div>`
			}
			
			return s
		}
		function remoteLookup(item){
			var s=``
			var input=`
			<div class="input-group">
			<input type="search" class="form-control ${item.class || ''}" id="${item.id}-autocomplete-text" field="${encodeURIComponent2(JSON.stringify(item))}"  placeholder="${item.placeholder || item.title || ''}" value="${item.valueText || ''}" autocomplete="off" autofill="off" spellcheck="false" ${item.required?'required="required"':''} ${item.readonly?'readonly':''} >
			<div class="input-group-prepend">
			<div class="input-group-text"><i class="fas fa-ellipsis-v"></i></div>
			</div>
			</div>
			<input type="hidden" name="${item.name}" value="${item.value || ''}">
			<input type="hidden" id="${item.id}-obj"  value="">
			`
			if(item.lookupTextField){
				input+=`<input type="hidden" name="${item.lookupTextFieldName || ''}" value="${item.valueText || ''}">`
			}

			
			if(item.noGroup===true){
				s=input
			}else{
				s=`<div class="form-group ${item.col || ''} ${item.visible===false?'hidden':''}">
				<label class="m-0 p-0 ${item.required?'form-required':''}">${item.title || ''}${helpButton(item)} ${item.lookupTextField?'<span class="ml-3 bold small text-success" id="' + item.id + '-original-text"></span>':''}</label>
				${input}
				</div>
				`
			}
			
			script+=`
			remoteLookupAutocomplete(JSON.parse(decodeURIComponent('${encodeURIComponent2(JSON.stringify(item))}')))
			`
			return s
		}

		function checkBox(item){
			var s=``
			var input=`<input type="checkbox" class="form-checkbox" id="${item.id}" name="${item.name}" field="${encodeURIComponent2(JSON.stringify(item))}" value="true" ${item.value?'checked':''} ${item.readonly==true?'disabled':''} onchange="${item.onchange || ''}" />`
			if(item.noGroup===true){
				s=input
			}else{
				s=`<div class="form-group ${item.col || ''} ${item.visible===false?'hidden':''}">
				<label>
				<span class="mb-1" style="display:block;">${item.title || ''}${helpButton(item)}</span>
				${input}
				</label>
				</div>`
			}
			
			return s
		}

		function dateRangeBox(item){
			var s=`<div id="${item.id}" class="row m-0 p-0">
			<select class="form-control col-sm-4 ${item.class || ''}" name="cboEasyDate" id="cboEasyDate">
			<option value="">Tarih</option>
			<option value="today">BugÃ¼n</option>
			<option value="thisWeek">Bu Hafta</option>
			<option value="thisMonth" selected>Bu Ay</option>
			<option value="last1Week">Son 1 Hafta</option>
			<option value="last1Month">Son 1 Ay</option>
			<option value="last3Months">Son 3 Ay</option>
			<option value="last6Months">Son 6 Ay</option>
			<option value="thisYear">Bu yÄ±l</option>
			<option value="last1Year">Son 1 yÄ±l</option>
			</select>
			<input type="date" name="date1" id="date1" class="form-control col-sm-4" value="${moment().format('YYYY-MM-DD')}">
			<input type="date" name="date2" id="date2" class="form-control col-sm-4" value="${moment().format('YYYY-MM-DD')}">
			</div>`

			script+=`
			$('#${item.id} #cboEasyDate').on('change',cboEasyDate_onchange_${item.id})

			if(pageSettings.getItem('${item.id}')){
				$('#${item.id} #cboEasyDate').val(pageSettings.getItem('${item.id}'))
				cboEasyDate_onchange_${item.id}()
			}

			function cboEasyDate_onchange_${item.id}(){
				var obj=cboEasyDateChange($('#${item.id} #cboEasyDate').val())
				$('#${item.id} #date1').val(obj.date1)
				$('#${item.id} #date2').val(obj.date2)
				pageSettings.setItem('${item.id}',$('#${item.id} #cboEasyDate').val())
			}

			`






			return group(s,item)
		}


	})(typeof exports === 'undefined'? this['FormControl']={}: exports)


</script>