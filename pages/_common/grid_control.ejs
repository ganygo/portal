<script type="text/javascript">
	(function(exports) {

		var script=''
		var defaultButtons={

			add:[false,''],
			copy:[false,''],
			view:[false,''],
			print:[false,''],
			edit:[false,''],
			delete:[false,'']
		}
		var rootGridId=0

		var frm=FormControl.FormControl
		
		var controlItem
		
		var _bRoot=false

		exports.GridControl = Object.freeze({
			build:build,
			grid:grid,
			gridHtml:gridHtml,
			addGridRow:addGridRow,
			editRow:editRow,
			modalRowOK:modalRowOK,
			refreshGrid:refreshGrid,
			get item(){
				return controlItem
			},
			set item(value){
				controlItem=value
			},
			get generateControls(){
				return formOlustur
			},
			set generateControls(value){
				formOlustur=value
			},
			get bRoot(){
				return _bRoot
			},
			set bRoot(value){
				_bRoot=value
			},
			get script(){
				return script
			},
			set script(value){
				script=value
			}
		})

		function build(item,bRoot=false){
			this.item=gridDefaults(item,bRoot)
			script+=`
			
			var grid${item.id}=GridControl.GridControl

			grid${item.id}.item=${JSON.stringify(item)}
			grid${item.id}.bRoot=${bRoot}
			// function refreshGrid${item.id}(){
				
				// grid${item.id}.grid(grid${item.id}.item,${bRoot},(err,html)=>{
				// 	if(!err){
				// 		$('#${item.id}').html(html)
				// 	}else{
				// 		$('#${item.id}').html()
				// 	}
					
				// 	$('#pageSize${item.id}').on('change',()=>{
				// 		if(grid${item.id}.item.paging==undefined)
				// 			grid${item.id}.item.paging={}
				// 		grid${item.id}.item.paging.pageSize=$('#pageSize${item.id}').val()
				// 		grid${item.id}.item.paging.page=1
						
				// 		refreshGrid${item.id}()
				// 	})
				// })
			// }
			// refreshGrid${item.id}()

			grid${item.id}.refreshGrid()

			`
			this.bRoot=bRoot
			return `<div id="${item.id}" class="table-responsive ${item.options.show.infoRow?'mt-1':''}"></div>
			${modalRow(this.item)}
			`
		}

		
		function refreshGrid(){
			
			grid(this.item,this.bRoot,(err,html)=>{
				console.log(`refreshGrid item:`,this.item)
				console.log(`refreshGrid bRoot:`,this.bRoot)
				if(!err){
					$(`#${this.item.id}`).html(html)
				}else{
					$(`#${this.item.id}`).html()
				}
				
				$(`#pageSize${this.item.id}`).on('change',()=>{
					console.log(`#pageSize${this.item.id} on change calisti`)
					if(this.item.paging==undefined)
						this.item.paging={}
					this.item.paging.pageSize=$(`#pageSize${this.item.id}`).val()
					this.item.paging.page=1
					
					this.refreshGrid()
				})
			})
		}
		function addGridRow(){
			var gridLine={}
			if(this.item.modal){
				gridLine=this.item.modal
			}else{
				gridLine={
					fields:this.item.fields || {}					
				}
			}
			gridLine.type="modal"
			gridLine.options={autocol:true}

			
			$(`#modalRow${this.item.id} .modal-title`).html('Yeni satir')
			$(`#modalRow${this.item.id} .modal-body`).html(`<div class="row">${formOlustur(gridLine,null)}</div>`)
			$(`#modalRow${this.item.id} .modal-footer`).html(`<a class="btn btn-primary" href="javascript:grid${this.item.id}.modalRowOK(-1)" title="Kaydet"><i class="fas fa-check"></i> Tamam</a><button class="btn btn-secondary" type="button" data-dismiss="modal">Vazgeç</button>`)
			$(`#modalRow${this.item.id}`).modal('show')
		}

		function editRow(rowIndex){
			if(!this.item.value)
				return
			var gridLine={}
			if(this.item.modal){
				gridLine=clone(this.item.modal)
			}else{
				gridLine={
					fields:clone(this.item.fields || {})
				}
			}
			gridLine.type="modal"
			gridLine.options={autocol:true}

			gridLine=modalRowIcinParentFieldAyarla(this.item,gridLine,rowIndex)
			$(`#modalRow${this.item.id} .modal-title`).html(`#${rowIndex+1} satırını düzenle`)
			$(`#modalRow${this.item.id} .modal-body`).html(`<div class="row">${formOlustur(gridLine,{value:gridLine.value})}</div>`)
			$(`#modalRow${this.item.id} .modal-footer`).html(`<a class="btn btn-primary" href="javascript:grid${this.item.id}.modalRowOK(${rowIndex})" title="Kaydet"><i class="fas fa-check"></i> Tamam</a><button class="btn btn-secondary" type="button" data-dismiss="modal">Vazgeç</button>`)
			
			console.log(`#modalRow${this.item.id}`,this.item)
			$(`#modalRow${this.item.id}`).modal('show')
		}

		function modalRowIcinParentFieldAyarla(item, gridLine,rowIndex){
			var pfield=`modalRow${item.id}`
			var value=item.value[rowIndex]
			gridLine.value={}
			gridLine.value[`modalRow${item.id}`]={}

			if(item.parentField!=undefined){
				pfield+=`.${item.parentField}`
				gridLine.value[`modalRow${item.id}`][item.parentField]={}
				gridLine.value[`modalRow${item.id}`][item.parentField][`${rowIndex}`]={}
				Object.keys(value).forEach((key)=>{
					gridLine.value[`modalRow${item.id}`][item.parentField][`${rowIndex}`][key]=value[key]
				})
			}else{
				gridLine.value[`modalRow${item.id}`]={}
				gridLine.value[`modalRow${item.id}`][`${rowIndex}`]={}
				Object.keys(value).forEach((key)=>{
					gridLine.value[`modalRow${item.id}`][`${rowIndex}`][key]=value[key]
				})
			}

			
			if(gridLine.tabs){
				gridLine.tabs.forEach((tab)=>{
					if(tab.fields){
						var fields={}
						Object.keys(tab.fields).forEach((key)=>{
							fields[`${pfield}.${rowIndex}.${key}`]=tab.fields[key]
							if(tab.fields[key].lookupTextField){
								fields[`${pfield}.${rowIndex}.${key}`].lookupTextField=`${pfield}.${rowIndex}.${tab.fields[key].lookupTextField}`
							}
						})
						tab.fields=fields
					}
				})
			}else if(gridLine.fields){
				var fields={}
				Object.keys(gridLine.fields).forEach((key)=>{
					fields[`${pfield}.${rowIndex}.${key}`]=gridLine.fields[key]
					if(gridLine.fields[key].lookupTextField){
						fields[`${pfield}.${rowIndex}.${key}`].lookupTextField=`${pfield}.${rowIndex}.${gridLine.fields[key].lookupTextField}`
					}
				})
				gridLine.fields=fields
			}
			
			return gridLine
		}

		function modalRowOK(rowIndex){
			
			if(!this.item)
				return
			if(!this.item.value)
				this.item.value=[]
				
			
			var pfield=`modalRow${this.item.id}`
			if(this.item.parentField!=undefined){
				pfield+=`.${this.item.parentField}.${rowIndex}`
			}else{
				pfield+=`.${rowIndex}`
			}
			var listObj=getDivData(`#modalRow${this.item.id}`,pfield)
			var obj=listObjectToObject(listObj)
			if(rowIndex>=0 && rowIndex<this.item.value.length){
				var valObj=objectToListObject(this.item.value[rowIndex])
				valObj=Object.assign({},valObj,listObj)

				this.item.value[rowIndex]=listObjectToObject(valObj)

				
			}else if(rowIndex<0){
				this.item.value.push(listObjectToObject(obj))
			}
			
			
			$(`#modalRow${this.item.id}`).modal('hide')

			this.refreshGrid()

		}

		function getDivData(divId,prefix=''){
			var obj={}
			var elements=document.querySelectorAll(`${divId} input`,`${divId} select`)
			var index=0
			while(index<elements.length){
				if(elements[index].name!=''){
					var key=elements[index].name.replaceAll('[','.').replaceAll(']','')
					var value=elements[index].value
					if(prefix!=''){
						if(key.substr(0,prefix.length)==prefix){
							key=key.substr(prefix.length)
							if(key.substr(0,1)=='.'){
								key=key.substr(1)
							}
						}
					}
					obj[key]=value
				}
				
				index++
			}
			return obj
			// return listObjectToObject(obj)
		}

		function modalRow(item){
			var s=`
			<div class="modal" id="modalRow${item.id}" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="true" aria-labelledby="modalRow${item.id}Label" aria-hidden="true">
			<div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered" role="document">
			<div class="modal-content">
			<div class="modal-header p-2 ">
			<label class="modal-title" id="modalRow${item.id}Label"></label>
			<button class="close" type="button" data-dismiss="modal" aria-label="Close">
			<span aria-hidden="true">&times;</span>
			</button>
			</div>
			<div class="modal-body p-2" style="overflow: auto;">

			</div>
			<div class="modal-footer">
			
			</div>
			</div>
			</div>
			</div>
			`
			return s
		}

		function grid(item,bRoot,cb){
			console.log(`function grid item broot:`,bRoot,item)
			var s=``
			// getRemoteData(item,bRoot,(err,item)=>{
			// 	if(!err){
				s+=gridHtml(item,bRoot)
				// }else{
				// 	s+=`Hata:${err.code || err.name || ''} - ${err.message || ''}`
				// }
				cb(null,s)
			// })
			
		}

		function gridHtml(item,bRoot){
			var s=``
			if(item.options.show.infoRow){
				s+=`
				<!-- info row -->
				<div class="row m-0 border">
				<div class="col-12 pt-1 px-1">
				<div class="float-left form-inline m-0 p-0 mt-1 mb-1">
				${item.options.show.filter?'<a class="btn btn-secondary btn-sm mr-3" data-toggle="collapse" href="#filterRow' + item.id +'" role="button" aria-expanded="false" aria-controls="filterRow' + item.id +'" title="Filtre satırını göster/gizle"><i class="fas fa-filter"></i></a>':''}
				${item.options.show.pageSize?pageSize(item,bRoot):''}
				${item.options.show.pageCount?pageCount(item,bRoot):''}
				</div>
				${item.options.show.pagerButtons?'<div class="float-right">' + pagerButtons(item,bRoot) + '</div>':''}
				</div>
				</div>
				<!-- ./info row -->
				`
			}
			s+=`
			<!-- table -->
			<table id="table${item.id}" class="table table-striped border m-0 ${!bRoot?'table-bordered':''}"  cellspacing="0">
			${item.options.show.header?header(item):''}
			${body(item,bRoot)}
			${item.options.show.footer?footer(item):''}
			</table>
			<!-- ./table -->
			`
			if(item.options.show.infoRow){
				s+=`
				<!-- info row -->
				<div class="row m-0 border">
				<div class="col-12 pt-1 px-1">
				<div class="float-left form-inline m-0 p-0 mt-1 mb-1">
				<div class="">
				buraya butonlar geliyor
				</div>
				${item.options.show.pageCount?pageCount(item,bRoot):''}
				</div>
				${item.options.show.pagerButtons?'<div class="float-right">' + pagerButtons(item,bRoot) + '</div>':''}
				</div>
				</div>
				<!-- ./info row -->
				`
			}
			return s
		}

		function body(item,bRoot){
			var s=`<tbody>`
			
			if(item.value){
				item.value.forEach((listItem,rowIndex)=>{
					s+=`<tr>`
					if(item.options.selection){
						s+=`<td><input class="grid-checkbox" type="checkbox" value="${listItem._id || ''}" /></td>`
					}
					Object.keys(item.fields).forEach((key)=>{
						var field=item.fields[key]
						var td=''
						var tdClass=`${field.class || 'ml-1'} `
						var itemValue=''
						if(field.type.toLowerCase()=='identity' || field.type.toLowerCase()=='autoincrement' || field.type.toLowerCase()=='autoinc'){
							itemValue=rowIndex+1
						}else{
							if(field.html){
								itemValue=replaceUrlCurlyBracket(field.html,listItem) || ''
							}else{
								itemValue=getPropertyByKeyPath(listItem,key)
								if(itemValue==undefined){
									itemValue=''
									if(field.type=='number' || field.type=='money'){
										itemValue=0
									}else if(field.type=='boolean'){
										itemValue=false
									}
								}
							}
						}
						switch(field.type.toLowerCase()){
							case 'lookup':
							Object.keys(field.lookup || {}).forEach((key2)=>{
								if(key2===itemValue.toString()){
									td+= field.lookup[key2]
									return
								}
							})
							if(td=='')
								td+=itemValue
							break
							case 'number':
							tdClass=field.class || 'text-right mr-1'
							td=itemValue
							break
							case 'money':
							tdClass=field.class || 'text-right mr-1'
							td=Number(itemValue).formatMoney()
							break

							case 'boolean':
							tdClass=field.class || 'text-center'
						// td.style.fontSize='20px'
						td=itemValue?'<i class="fas fa-check-square text-primary"></i>':'<i class="far fa-square text-dark"></i>'
						break
						case 'remotelookup':
						var bRemoteOlarakBulalim=true
						if(itemValue==undefined)
							itemValue=''

						if(typeof itemValue=='object' && itemValue._id!=undefined){
							
							td=`<div class="">${replaceUrlCurlyBracket((field.dataSource.label || '{name}'), itemValue)}</div>`
							bRemoteOlarakBulalim=false

						}else	if(field.lookupTextField){
							var valueText=getPropertyByKeyPath(listItem,field.lookupTextField)
							td=`<div class="">${valueText}</div>`
							if(!bRoot){
								td+=`<input type="hidden" name="${generateFormName((field.parentField?field.parentField + '.':'') + rowIndex + '.' + field.lookupTextField)}" value="${valueText}" />`
							}
							
							if(valueText=='' && itemValue!=''){
								bRemoteOlarakBulalim=true
							}else{
								bRemoteOlarakBulalim=false
							}
						}

						if(bRemoteOlarakBulalim){
							var cellId=''
							if(itemValue!=''){
								cellId=`${gridId}-cell-${itemValue}`
								if(remoteList==undefined){
									remoteList={}
								}

								if(remoteList[field.field]==undefined){
									remoteList[field.field]={
										dataSource:field.dataSource,
										list:{}
									}
								}
								if(remoteList[field.field].list[itemValue]==undefined){
									remoteList[field.field].list[itemValue]={
										cellId:'.' + cellId,
										text:''
									}
									if(field.lookupTextField){
										remoteList[field.field].list[itemValue]['lookupTextField']=`${generateFormName((field.parentField?field.parentField + '.':'') + rowIndex + '.' + field.lookupTextField)}`
									}
								}
							}
							
							td+=`<div class="${cellId}">rmtlkup${itemValue}</div>`
						}


						break
						default:
						
						td=itemValue
						break
					}
					if(!field.html && !bRoot){
						td+=`<input type="hidden" name="${generateFormName((field.parentField?field.parentField + '.':'') + rowIndex + '.' + key)}" value="${itemValue}" />`
					}
					
					s+=`<td class="${tdClass || ''} ${field.visible===false?'hidden':''}">${td}</td>`
				})

					s+=`<td class="text-center">${buttonRowCell(listItem,rowIndex,item,bRoot)}</td>`

					s+=`</tr>`
				})
			}
			s+=`</tbody>`
			return s
		}

		function buttonRowCell(listItem,rowIndex,item,bRoot){
			var s=``
			
			listItem['rowIndex']=rowIndex
			Object.keys(item.options.buttons).forEach((key)=>{
				if(key!='add')
					s+=`${item.options.buttons[key][0]?replaceUrlCurlyBracket(item.options.buttons[key][1],listItem):''}`
			})

			return s
		}

		function pageSize(item,bRoot){
			var s=`<div class="mt-1 align-items-center" style="display: inline-flex">
			Sayfada
			<select class="form-control input-inline input-sm" id="pageSize${item.id}">
			<option value="10" ${item.paging.pageSize==10?'selected':''}>10</option>
			<option value="20" ${item.paging.pageSize==20?'selected':''}>20</option>
			<option value="50" ${item.paging.pageSize==50?'selected':''}>50</option>
			<option value="100" ${item.paging.pageSize==100?'selected':''}>100</option>
			<option value="250" ${item.paging.pageSize==250?'selected':''}>250</option>
			<option value="500" ${item.paging.pageSize==500?'selected':''}>500</option>
			</select>
			</div>`

			return s
		}

		function pageCount(item,bRoot){
			var s=`<div class="ml-2" style="display: inline-block">`
			if(item.paging.pageSize>0 && item.paging.recordCount>0){
				s+=`${((item.paging.page-1)*item.paging.pageSize)+1} - ${(item.paging.page*item.paging.pageSize<item.paging.recordCount)?item.paging.page*item.paging.pageSize:item.paging.recordCount} arası, Toplam: ${item.paging.recordCount} kayit, ${item.paging.pageCount} sayfa`
			}else{
				s+=`Toplam: ${item.paging.recordCount} kayit`
			}
			s+=`</div>`

			return s
		}

		function pagerButtons(item,bRoot){
			var s=``

			return s
		}


		function header(item){
			var s=`
			<thead>
			<tr class="text-nowrap">
			${item.options.selection===true?'<th style="width: 30px;"><input class="grid-checkbox" type="checkbox" value="true" name="selectAll" id="selectAll" title="Tümünü seç"></th>':''}
			`
			Object.keys(item.fields).forEach((key)=>{
				var field=item.fields[key]
				var cls=''
				switch(item.fields[key].type ){
					case 'money':
					case 'number':
					cls='text-right mr-1'
					break
					case 'boolean':
					cls='text-center'
					break
				}
				if(field.visible===false){
					cls+=' hidden'
				}
				s+=`<th class="${cls}" style="${field.width?'width:' + field.width:''}">${field.icon?'<i class="' + field.icon + '"></i>':''} ${field.title || ''}</th>`
			})

			s+=`<th class="text-center" style="width:${item.options.buttonWidth}">
			${item.options.buttons.add[0]==true?item.options.buttons.add[1]:''}
			</th>
			</tr>
			${item.options.show.filterRow===true?filterRow(item):''}
			</thead>
			`

			return s
		}

		function filterRow(item){
			frm.script=''
			var s=`<tr id="filterRow${item.id}" class="text-nowrap collapse">
			${item.options.selection===true?'<th></th>':''}
			`
			Object.keys(item.fields).forEach((key,index)=>{
				var field=clone(item.fields[key])
				var cell=''
				field.visible=field.visible==undefined?field.visible:true
				field.filter=field.filter==undefined?item.options.filter:field.filter
				field.id=generateFormId(`filter_${index}`)
				field.class='grid-filter'
				field.noGroup=true

				if(field.filter){
					switch(field.type.toLowerCase()){
						case 'lookup':
						field.showAll=true
						cell=frm.lookup(field)
						break
						case 'remotelookup':
						cell=frm.remoteLookup(field)
						break
						case 'boolean':
						cell=frm.checkBoxLookup(field)
						break
						case 'date':
						cell=frm.dateBox(field)
						break
						case 'time':
						cell=frm.timeBox(field)
						break
						default:
						cell=frm.textBox(field)
						break
					}
				}
				s+=`<th class="${field.visible==false?'hidden':''}">${cell}</th>`
			})

			s+=`
			<th></th>
			</tr>
			`
			script+=frm.script
			return s
		}

		function footer(item){
			return `<tfood>qwerty</tfood>`
		}

		
		function buttonOptions(item,bRoot){
			var options=item.options || {}
			var buttonCount=0
			var currentPath=window.location.pathname

			if(options.buttons==undefined){
				options.buttons=defaultButtons
			}else{
				options.buttons=Object.assign({},defaultButtons, options.buttons)
				Object.keys(options.buttons).forEach((key)=>{
					if(typeof options.buttons[key]=='boolean'){
						options.buttons[key]=[options.buttons[key],'']
					}else if(Array.isArray(options.buttons[key])){
						if(options.buttons[key].length<2)
							options.buttons[key].push('')
					}
				})
			}

			if(options.buttons.add[0]==true && options.buttons.add[1]==''){
				if(bRoot){
					// options.buttons.add[1]=`<a href="${currentPath}/addnew?mid=${q.mid}" class="btn btn-primary  btn-sm far fa-plus-square" target="_self"  title="Yeni Ekle"></a>`
					options.buttons.add[1]=`<a href="${currentPath}?mid=${q.mid}#addnew/" class="btn btn-primary  btn-sm far fa-plus-square" target="_self"  title="Yeni Ekle"></a>`
				}else{
					options.buttons.add[1]=`<a href="javascript:grid${item.id}.addGridRow()" class="btn btn-primary  btn-sm far fa-plus-square" target="_self"  title="Yeni Ekle"></a>`
				}
			}

			if(options.buttons.copy[0]==true && options.buttons.copy[1]==''){
				options.buttons.copy[1]=`<a href="javascript:gridHelper.gridCopyItem('{field[0]}', '{_id}')" class="btn btn-grid-row btn-success " title="Kopyala"><i class="fas fa-copy"></i></a>`
			}

			if(options.buttons.print[0]==true && options.buttons.print[1]==''){
				options.buttons.print[1]=`<a href="javascript:popupCenter('${currentPath}/print/{_id}?mid=${q.mid}','Yazdır','900','600')" class="btn btn-grid-row btn-info " title="Yazdır"><i class="fas fa-print"></i></a>`
			}

			if(options.buttons.view[0]==true && options.buttons.view[1]==''){
				options.buttons.view[1]=`<a href="javascript:popupCenter('${currentPath}/view/{_id}?mid=${q.mid}','İncele','900','600')" class="btn btn-info btn-grid-row fas fa-eye" title="İncele"></a>`
			}

			if(options.buttons.edit[0]==true && options.buttons.edit[1]==''){
				// options.buttons.edit[1]=`<a href="${currentPath}/edit/{_id}?mid=${q.mid}" class="btn btn-primary btn-grid-row fas fa-edit" target="_self"  title="Düzenle"></a>`
				if(bRoot){
					options.buttons.edit[1]=`<a href="${currentPath}?mid=${q.mid}#edit/id={_id}" class="btn btn-primary btn-grid-row fas fa-edit" target="_self"  title="Düzenle"></a>`
				}else{
					options.buttons.edit[1]=`<a href="javascript:grid${item.id}.editRow({rowIndex})" class="btn btn-success btn-grid-row fas fa-edit" target="_self"  title="Düzenle"></a>`
				}
			}

			if(options.buttons.delete[0]==true && options.buttons.delete[1]==''){
				if(bRoot){
					options.buttons.delete[1]=`<a href="javascript:gridHelper.gridDeleteItem('{field[0]}','{_id}')" class="btn btn-danger btn-grid-row fas fa-trash-alt" title="Sil"></a>`
				}else{
					options.buttons.delete[1]=`<a href="javascript:grid${item.id}.deleteRow({rowIndex})" class="btn btn-danger btn-grid-row fas fa-trash-alt" title="Sil"></a>`
				}
			}

			Object.keys(options.buttons).forEach((key)=>{
				buttonCount +=options.buttons[key][0]?1:0
			})
			if(buttonCount>1 && options.buttons.add[0])
				buttonCount--

			buttonCount=buttonCount>4?4:buttonCount

			if(bRoot){
				options.buttonWidth=`${buttonCount*45+10}px`
			}else{
				options.buttonWidth=`${2*45+10}px`
			}
			item.options=options
			return item
		}

		function gridDefaults(item,bRoot){
			if(item.id==undefined && bRoot){
				rootGridId++
				item.id=`rootGrid${rootGridId}`
			}
			item=buttonOptions(item,bRoot)
			if(!bRoot){
				item.options.show={
					filter:false,
					pageSize:false,
					pageCount:false,
					pagerButtons:false,
					header:true,
					footer:false
				}
			}else{
				item.options.show={
					filter:true,
					pageSize:true,
					pageCount:true,
					pagerButtons:true,
					header:true,
					footer:true
				}
			}
			if(item.options.show.filter || item.options.show.pageSize || item.options.show.pageCount || item.options.show.pagerButtons){
				item.options.show.infoRow=true
			}else{
				item.options.show.infoRow=false
			}
			item.options.show.filterRow=item.options.filter || false
			if(bRoot===false)
				item.options.show.filterRow=false

			if(item.options.show.filterRow){
				var bFound=false
				Object.keys(item.fields).forEach((key)=>{
					item.fields[key].filter=item.fields[key].filter==undefined?true:false
					if(item.fields[key].filter===true){
						bFound=true
						return
					}
				})
				if(bFound==false){
					item.options.show.filterRow=false
				}
			}
			return item
		}

	})(typeof exports === 'undefined'? this['GridControl']={}: exports)


</script>