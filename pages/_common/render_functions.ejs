<script type="text/javascript">
	const staticValues=JSON.parse(decodeURIComponent(`<%- encodeURIComponent2(JSON.stringify(staticValues)) %>`))


	function helpButton(item){
		if((item.help || '')!=''){
			var helpUrl=manipulateUrl(item.help)
			
			return `<a href="javascript:openInNewTab('${helpUrl}')" class="skip-enter-next text-primary bold ml-2" title="Yardım ve açıklama için tıklayınız"><i class="far fa-question-circle"></i></a>`
		}else{
			return ''
		}
	}

	function manipulateUrl(url,mid=''){
		url+=`${url.indexOf('?')<0?'?':'&'}mid=${mid==''?(q.mid || ''):mid}`
		return url
	}
	
	var q=getAllUrlParams()

	function getAllUrlParams(query=null){
		var q={}
		var queryString=query || window.location.search

		var dizi=queryString.split('&')
		dizi.forEach((d)=>{
			var key=d.split('=')[0]
			var value=getUrlParameter(key,query)
			if(value!=''){
				if(key[0]=='?') key=key.substr(1)
					q[key]=value
			}
		})
		return q
	}


	function getUrlParameter(name,query=null) {
		name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]')
		var regex = new RegExp('[\\?&]' + name + '=([^&#]*)')
		var results=regex.exec(query || location.search)
		
		
		return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '))
	}

	String.prototype.replaceAll = function (search, replacement) {
		var target = this
		return target.split(search).join(replacement)
	}

	function uuidv4() {
		return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c)=>{
			var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8)
			return v.toString(16)
		})
	}

	
	function maxLookupLength(lookup){
		var max=0
		Object.keys(lookup).forEach((key)=>{
			if(lookup[key].length>max)
				max=lookup[key].length
		})
		return max
	}

	function generateFormName(name){ 
		var keys = name.toString().split('.')
		if(keys.length<=1){
			return name
		}else{
			var s=''
			keys.forEach((k,index)=>{
				if(index==0)
					s=k
				else
					s+=`[${k}]`
			})
			return s
		}
	}

	function generateFormId(name) { 
		if(typeof name=='string')
			return name.replaceAll('.','_')
		else
			return ''
	}

	function loadCardCollapses(){
		var kartlar=document.getElementsByClassName('card-collapse')
		var i=0
		while(i<kartlar.length){
			if(pageSettings.getItem(`collapse_${kartlar[i].id}`)){
				$(`#${kartlar[i].id}`).collapse(pageSettings.getItem(`collapse_${kartlar[i].id}`))			
			}
			i++
		}

		$('.card-collapse').on('show.bs.collapse',(e)=>{
			pageSettings.setItem(`collapse_${e.target.id}`,e.type)

		})
		$('.card-collapse').on('hide.bs.collapse',(e)=>{
			pageSettings.setItem(`collapse_${e.target.id}`,e.type)

		})

		$('.modal .card-collapse').on('show.bs.collapse',(e)=>{
			pageSettings.setItem(`collapse_${e.target.id}`,e.type)
		})
		$('.modal .card-collapse').on('hide.bs.collapse',(e)=>{
			pageSettings.setItem(`collapse_${e.target.id}`,e.type)
		})
	}


	function getAjax(url,labelStr='{name}',exceptId='',cb){

		$.ajax({
			url:url,
			type:'GET',
			dataType: 'json',
			success: function(result) {
				if(result.success){
					var dizi=[]

					if(result.data.docs!=undefined){
						result.data.docs.forEach((e)=>{

							var text=replaceUrlCurlyBracket(labelStr, e,e)
							dizi.push({label:text,value:text,obj:e})
						})
					}else{
						if(Array.isArray(result.data)){
							result.data.forEach((e)=>{
								var text=replaceUrlCurlyBracket(labelStr, e,e)
								dizi.push({label:text,value:text,obj:e})
							})
						}else{
							var text=replaceUrlCurlyBracket(labelStr, result.data, result.data)
							dizi.push({label:text,value:text,obj:result.data})
						}
					}

					if(cb)
						cb(null,dizi)
				}else{
					if(cb)
						cb(result.error)
				}
			},
			error:function(err){
				console.error('err2:',err)
				if(cb)
					cb(err)
			}
		})
	}


	function remoteLookupAutocomplete(locals){
		if(locals.dataSource==undefined)
			return

		var searchUrl=''
		if((locals.dataSource.search || '')!=''){
			searchUrl=replaceUrlCurlyBracket(locals.dataSource.search, {_id:locals.value})

		}else if((locals.dataSource.url || '')!=''){
			searchUrl=replaceUrlCurlyBracket(locals.dataSource.url, {_id:locals.value})
			if(searchUrl.indexOf('?')<0){
				searchUrl+='?search={search}'
			}else{
				searchUrl+='&search={search}'
			}
		}
		var idUrl=''
		if(locals.dataSource.id || locals.dataSource.idUrl){
			idUrl=replaceUrlCurlyBracket(locals.dataSource.id  || locals.dataSource.idUrl, {_id:locals.value})

		}else if(locals.dataSource.url){
			idUrl=replaceUrlCurlyBracket(locals.dataSource.url, {_id:locals.value})
			if(idUrl.indexOf('?')<0){
				idUrl+=`/${locals.value}`
			}else{
				idUrl+=`&id=${locals.value}`
			}
		}


		if(searchUrl=='' || idUrl==''){
			return
		}

		var labelStr=(locals.dataSource.label || '{name}')
		var valueText=locals.valueText || ''

		$(`#${locals.id}-autocomplete-text`).autocomplete({
			source:function(request,response){
				var typedText=encodeURIComponent2(request.term)
				var url=searchUrl.replace('{search}',typedText).replace('{search}',typedText).replace('{mid}',q.mid)

				getAjax(url,`${labelStr}`,``,(err,result)=>{
					if(!err){
						response(result)
					}else{
						console.error(err)
						response([])
					}
				})
			},
			select: function (event, ui) {
				$(`#${locals.id}-autocomplete-text`).val((ui.item.label || ''))
				$(`input[name="${locals.name}"]`).val(ui.item.obj._id.toString())
				$(`#${locals.id}-obj`).val(encodeURIComponent2(JSON.stringify(ui.item.obj)))
				if(locals.lookupTextField){
					$(`input[name="${locals.lookupTextFieldName}"]`).val((ui.item.label || ''))
					$(`#${locals.id}-original-text`).html((ui.item.label || ''))
				}
				if(locals.onchange){
					eval(`${locals.onchange}`)
				}
				return false
			}
		})


		$(`#${locals.id}-autocomplete-text`).on('change',()=>{

			if($(`#${locals.id}-autocomplete-text`).val()==''){
				$(`input[name="${locals.name}"]`).val('')
				$(`#${locals.id}-obj`).val('')
				if(locals.lookupTextField){
					$(`#${locals.id}-original-text`).html('')
				}
			}
			if(locals.lookupTextField){
				$(`input[name="${locals.lookupTextFieldName}"]`).val($(`#${locals.id}-autocomplete-text`).val())
			}
		})


		if((locals.value || '')!=''){
			var url=idUrl.replace('{mid}',q.mid)
			getAjax(url,`${labelStr}`,``,(err,result)=>{
				if(!err){
					if(result.length>0){
						if(valueText==''){
							$(`#${locals.id}-autocomplete-text`).val((result[0].label || ''))
						}

						$(`input[name="${locals.name}"]`).val(result[0].obj._id.toString())
						$(`#${locals.id}-obj`).val(encodeURIComponent2(JSON.stringify(result[0].obj)))

						if(locals.lookupTextField){
							$(`#${locals.id}-original-text`).html((result[0].label || ''))
						}

					}else{
						if(valueText=='')
							$(`#${locals.id}-autocomplete-text`).val('')
						$(`input[name="${locals.name}"]`).val('')
						$(`#${locals.id}-obj`).val('')
						$(`#${locals.id}-original-text`).html('')
					}

				}else{
					$(`#${locals.id}-autocomplete-text`).val(err.message)
				}
			})

		}
	}


	
	function cboEasyDateChange(value){

		var date1=new Date()
		var date2=new Date()
		date1.setHours(0, 0, 0, 0)
		date1.setMinutes((new Date()).getTimezoneOffset())
		date2.setHours(0, 0, 0, 0)
		date2.setMinutes((new Date()).getTimezoneOffset())

		switch(value){
			case 'today':
			break
			case 'thisWeek':
			date1=date1.addDays(-1 * (date1.getDay()-1))
			date2=date2.addDays(7- date2.getDay())
			break
			case 'thisMonth': 
			date1=date1.addDays(-1 * (date1.getDate()-1))
			date2=date2.lastThisMonth()
			break
			case 'last1Week':
			date1=date1.addDays(-7)
			break

			case 'last1Month':
			date1=new Date(date1.setMonth(date1.getMonth()-1))
			break
			case 'last3Months':
			date1=new Date(date1.setMonth(date1.getMonth()-3))
			break
			case 'last6Months':
			date1=new Date(date1.setMonth(date1.getMonth()-6))
			break
			case 'thisYear':
			date1=new Date(date1.getFullYear(),0,1)
			date2=new Date(date2.getFullYear(),11,31)
			break
			case 'last1Year':
			date1=new Date(date1.setMonth(date1.getMonth()-12))
			break
			default:
			break
		}
		return {
			date1:date1.yyyymmdd(),
			date2:date2.yyyymmdd()
		}
	}


	function replaceUrlCurlyBracket(url,item){
		if((url || '')=='')
			return ''
		if(!(url.indexOf('{')>-1 && url.indexOf('}')>-1))
			return url
		var fieldList=[]
		var dizi=url.split('}')
		dizi.forEach((e)=>{
			if(e.indexOf('{')>-1){
				fieldList.push(e.split('{')[1])
			}
		})

		fieldList.forEach((e)=>{
			url=url.replaceAll(`{${e}}`,getPropertyByKeyPath(item,e))
		})

		return url
	}



	function getPropertyByKeyPath(targetObj, keyPath) {
		if(targetObj==undefined || targetObj==null || !keyPath)
			return targetObj

		if(keyPath.substr(0,1)=='/')
			keyPath=keyPath.substr(1)
		if(keyPath.substr(0,2)=='./')
			keyPath=keyPath.substr(2)
		keyPath=keyPath.replaceAll('/','.')

		var keys = keyPath.split('.')
		if(keys.length == 0) 
			return undefined
		keys = keys.reverse()
		var subObject = targetObj
		while(keys.length) {
			var k = keys.pop()
			if(typeof subObject[k]=='undefined' || subObject[k]==null) {
				return undefined
			} else {
				subObject = subObject[k]
			}
		}
		return subObject
	}



	function listObjectToObject(listObj){
		if(typeof listObj!='object' || listObj==null )
			return listObj
		var obj={}

		Object.keys(listObj).forEach((mainKey)=>{
			if(mainKey.indexOf('.')>-1){
				var keys=mainKey.split('.')

				if(obj[keys[0]]==undefined)
					obj[keys[0]]={}


				if(obj[keys[0]][keys[1]]==undefined){
					if(keys.length==2)
						return obj[keys[0]][keys[1]]=listObj[`${keys[0]}.${keys[1]}`]
					else
						obj[keys[0]][keys[1]]={}
				}

				if(obj[keys[0]][keys[1]][keys[2]]==undefined){
					if(keys.length==3)
						return obj[keys[0]][keys[1]][keys[2]]=listObj[`${keys[0]}.${keys[1]}.${keys[2]}`]
					else
						obj[keys[0]][keys[1]][keys[2]]={}
				}

				if(obj[keys[0]][keys[1]][keys[2]][keys[3]]==undefined){
					if(keys.length==4)
						return obj[keys[0]][keys[1]][keys[2]][keys[3]]=listObj[`${keys[0]}.${keys[1]}.${keys[2]}.${keys[3]}`]
					else
						obj[keys[0]][keys[1]][keys[2]][keys[3]]={}
				}

				if(obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]]==undefined){
					if(keys.length==5)
						return obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]]=listObj[`${keys[0]}.${keys[1]}.${keys[2]}.${keys[3]}.${keys[4]}`]
					else
						obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]]={}
				}

				if(obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]][keys[5]]==undefined){
					if(keys.length==6)
						return obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]][keys[5]]=listObj[`${keys[0]}.${keys[1]}.${keys[2]}.${keys[3]}.${keys[4]}.${keys[5]}`]
					else
						obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]][keys[5]]={}
				}
				if(obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]][keys[5]][keys[6]]==undefined){
					if(keys.length==7)
						return obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]][keys[5]][keys[6]]=listObj[`${keys[0]}.${keys[1]}.${keys[2]}.${keys[3]}.${keys[4]}.${keys[5]}.${keys[6]}`]
					else
						obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]][keys[5]][keys[6]]={}
				}
				if(obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]][keys[5]][keys[6]][keys[7]]==undefined){
					if(keys.length==8)
						return obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]][keys[5]][keys[6]][keys[7]]=listObj[`${keys[0]}.${keys[1]}.${keys[2]}.${keys[3]}.${keys[4]}.${keys[5]}.${keys[6]}.${keys[7]}`]
					else
						obj[keys[0]][keys[1]][keys[2]][keys[3]][keys[4]][keys[5]][keys[6]][keys[7]]={}
				}
			}else{
				obj[mainKey]=listObj[mainKey]
			}
		})
		return obj
	}

	function objectToListObject(obj){
		var listObj={}
		Object.keys(obj).forEach((key)=>{
			if(typeof obj[key]=='object'){
				Object.keys(obj[key]).forEach((key2)=>{
					if(typeof obj[key][key2]=='object'){
						Object.keys(obj[key][key2]).forEach((key3)=>{
							if(typeof obj[key][key2][key3]=='object'){
								Object.keys(obj[key][key2][key3]).forEach((key4)=>{
									if(typeof obj[key][key2][key3][key4]=='object'){
										Object.keys(obj[key][key2][key3][key4]).forEach((key5)=>{
											if(typeof obj[key][key2][key3][key4][key5]=='object'){
												Object.keys(obj[key][key2][key3][key4][key5]).forEach((key6)=>{
													if(typeof obj[key][key2][key3][key4][key5]=='object'){
														Object.keys(obj[key][key2][key3][key4][key5][key6]).forEach((key7)=>{
															listObj[`${key}.${key2}.${key3}.${key4}.${key5}.${key6}.${key7}`]=obj[key][key2][key3][key4][key5][key6][key7]
														})
													}else{
														listObj[`${key}.${key2}.${key3}.${key4}.${key5}.${key6}`]=obj[key][key2][key3][key4][key5][key6]
													}
													
												})
											}else{
												listObj[`${key}.${key2}.${key3}.${key4}.${key5}`]=obj[key][key2][key3][key4][key5]
											}
											
										})
									}else{
										listObj[`${key}.${key2}.${key3}.${key4}`]=obj[key][key2][key3][key4]
									}
								})
							}else{
								listObj[`${key}.${key2}.${key3}`]=obj[key][key2][key3]
							}
						})
					}else{
						listObj[`${key}.${key2}`]=obj[key][key2]
					}
				})
			}else{
				listObj[key]=obj[key]
			}

		})
		return listObj
	}

	function getFormData(divId){
		
		var obj=listObjectToObject($(`${divId}`).serializeArray().reduce((obj, item) => ({ ...obj, ...{ [item.name.replaceAll('[','.').replaceAll(']','')]: item.value } }), {}))
		return obj
	}

	$('body').on('keydown', 'input, select', (e)=>{
		if(e){
			if(e.key){
				if (e.key === "Enter") {
					return enterNext(e.currentTarget)
				}
			}
		}
	})
	
	function enterNext(bu){
		if(bu==undefined)
			bu=this
		var self = $(bu), form = self.parents('form:eq(0)'), focusable, next
		focusable = form.find('input,a,select,button,textarea').filter(':visible')
		next = focusable.eq(focusable.index(bu)+1)
		if (next.length) {
			
			var readonly=next.prop('readonly') || false
			var disabled=next.prop('disabled') || false
			var cl=next.prop('class') || ''

			if(cl.indexOf('btn-collapse')>-1 || cl.indexOf('skip-enter-next')>-1 || cl.indexOf('no-enter-next')>-1)
				return enterNext(next)

			if(readonly || disabled )
				return enterNext(next)
			
			next.focus()
			if(typeof next.select === 'function')
				next.select()
		} else {
			//form.submit()
		}
		return false
	}

	function getRemoteData(item,cb){
		var hashObj=getHashObject()
		var data={
			// paging:{
			// 	page:1,
			// 	pageCount:1,
			// 	pageSize:50000,
			// 	recordCount:item.value.length
			// },
			value:item.value || ''
		}
		if(item.value==undefined){
			switch(item.type){
				case 'grid':
				data.value=[]
				break
				case 'form':
				data.value={}
				break
				case 'filter':
				data.value={}
				break

				case 'number':
				case 'money':
				data.value=0
				break

				default:
				data.value=''
				break
			}
		}

		if(item.dataSource==undefined){
			
			return cb(null,data)
		}
		

		var url=item.dataSource.url

		if(hashObj.function=='addnew'){
			return cb(null,item)
		}else if(hashObj.function=='index'){
			url+=`${url.indexOf('?')>-1?'&':'?'}page=${hashObj.page || 1}&pageSize=${hashObj.pageSize || 10}`
		}else{
			if(hashObj.id){
				url=`${url.split('?')[0]}/${hashObj.id}`
				if(url.split('?')[1]){
					url+='?' + url.split('?')[1]
				}
			}else{
				url+=`${url.indexOf('?')>-1?'&':'?'}page=${hashObj.page || 1}&pageSize=${hashObj.pageSize || 10}`
			}
		}

		$.ajax({
			url:url,
			type:item.dataSource.method || 'GET',
			dataType: 'json',
			success: function(result) {
				if(result.success){
					if(result.data.docs){
						data.value=result.data.docs
						data.paging={
							page:result.data.page,
							pageCount:result.data.pageCount,
							pageSize:result.data.pageSize,
							recordCount:result.data.recordCount
						}
					}else{
						data.value=result.data
					}

					cb(null,data)
				}else{
					cb(result.error)
				}
			},
			error:function(err){
				cb(err)
			}
		})

	}

	function getHashObject(){
		var hash=window.location.hash.replace('#','')
		var query=hash.split('/')[1]?hash.split('/')[1]:''
		var hashObj={}
		if(query){
			query='?'+query
			hashObj=getAllUrlParams(query)
			
		}

		hashObj.function=hash.split('/')[0]
		
		return hashObj
	}


	function cariKart_changed(prefix){

		var fieldList=[
		"person.firstName.value",
		"person.familyName.value",
		"partyIdentification.0.ID.value",
		"partyIdentification.0.ID.attr.schemeID",
		"partyTaxScheme.taxScheme.name.value",
		"postalAddress.streetName.value",
		"postalAddress.buildingNumber.value",
		"postalAddress.buildingName.value",
		"postalAddress.blockName.value",
		"postalAddress.room.value",
		"postalAddress.citySubdivisionName.value",
		"postalAddress.district.value",
		"postalAddress.cityName.value",
		"postalAddress.region.value",
		"postalAddress.country.identificationCode.value",
		"postalAddress.country.name.value",
		"postalAddress.postbox.value",
		"contact.telephone.value",
		"contact.telefax.value",
		"contact.electronicMail.value",
		"websiteURI.value"
		]

		var cari=$(`#${generateFormId(prefix+'.party._id')}-obj`).val()
		if(cari==undefined)
			return
		var obj=JSON.parse(decodeURIComponent(cari))
		fieldList.forEach((e)=>{
			var componentFieldName=`${prefix}.party.${e}`

			var value=getPropertyByKeyPath(obj,e)
			if(value!=undefined){
				if($(`#${generateFormId(componentFieldName)}`).val()!=undefined){
					$(`#${generateFormId(componentFieldName)}`).val(value)
				}
			}
		})

		if(($(`#${generateFormId(prefix + '.party.postalAddress.country.identificationCode.value')}`).val() || '')==''){
			$(`#${generateFormId(prefix + '.party.postalAddress.country.identificationCode.value')}`).val('TR')

		}
	}

	function countryCode_changed(prefix){
		var fieldName=`${prefix}.party.postalAddress.country.identificationCode.value`
		var fieldNameCountryName=`${prefix}.party.postalAddress.country.name.value`
		var countryCode=$(`#${generateFormId(fieldName)}`).val() || ''
		var countryText=$(`#${generateFormId(fieldName)} option:selected`).text() || ''

		if(countryCode!=''){
			$(`#${generateFormId(fieldNameCountryName)}`).val(countryText)
			console.log(`countryCode_changed:`,countryText)
		}
	}

	function formSave(dataSource,formData){
		var hashObj=getHashObject()
		var url=dataSource.url
		var method='GET'
		if(hashObj.function=='addnew'){
			method='POST'
		}else if(hashObj.function=='edit' && hashObj.id){
			method='PUT'
			url+=`/${hashObj.id}`
		}else{
			return alertX('URL hatasi var')
		}
		
		$.ajax({
			url:url,
			type:method,
			data:formData,
			dataType: 'json',
			success: function(result) {
				if(result.success){
					window.location.href=window.location.href.split('#')[0] + `#index/`
				}else{
					alertX(`${result.error.code} - ${result.error.message}`,`Hata`,`danger`)
				}
			},
			error:function(err){
				alertX(`${result.error.code} - ${result.error.message}`,`Hata`,`danger`)
			}
		})
	}

	function getDivData(divId,prefix=''){
		var obj={}
		var elements=document.querySelectorAll(`${divId} input, select`)
		var index=0
		while(index<elements.length){
			if(elements[index].name!=''){
				var key=elements[index].name.replaceAll('[','.').replaceAll(']','')
				var value=elements[index].value
				if(prefix!=''){
					if(key.substr(0,prefix.length)==prefix){
						key=key.substr(prefix.length)
						if(key.substr(0,1)=='.'){
							key=key.substr(1)
						}
					}
				}
				obj[key]=value
			}

			index++
		}
		return listObjectToObject(obj)
	}

	function collectFieldList(item){
		var fieldList={}
		if(item.tabs){
			item.tabs.forEach((tab)=>{
				if(tab.fields){
					var f=collectFieldList(tab.fields)
					fieldList=Object.assign({},fieldList,f)
				}
			})

		}else if(item.fields){

			Object.keys(item.fields).forEach((key)=>{
				if(item.fields[key].fields){
					var f=collectFieldList(item.fields[key])

					if(item.fields[key].type=='grid'){
						
						Object.keys(f).forEach((k)=>{
							f[k].id=f[k].id || generateFormId(key + '.' + k)
							f[k].name=f[k].name || generateFormName(key + '.' + k)
						})
						var f2={}
						f2[key]=f
						fieldList=Object.assign({},fieldList,f2)
					}else{
						Object.keys(f).forEach((k)=>{
							f[k].id=f[k].id || generateFormId(k)
							f[k].name=f[k].name || generateFormName(k)
						})
						fieldList=Object.assign({},fieldList,f)
					}
					
				}else{
					fieldList[key]=item.fields[key]
					fieldList[key].id=fieldList[key].id || generateFormId(key)
					fieldList[key].name=fieldList[key].name || generateFormName(key)
				}
			})
		}
		return fieldList
	}

</script>